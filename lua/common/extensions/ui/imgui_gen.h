///////////////////////////////////////////////////////////////////////////////
// this file is used for declaring C types for LuaJIT's FFI. Do not use it in C
///////////////////////////////////////////////////////////////////////////////

// !!!! DO NOT EDIT THIS FILE -- It was automatically generated by tools/imguiUtilities/gen.py at git repo beamng/gameengine -- DO NOT EDIT THIS FILE !!!!

typedef struct { float x, y; } ImVec2_C;
typedef struct { float x, y, z, w; } ImVec4_C;

typedef struct ImDrawCmd ImDrawCmd;
typedef struct ImDrawData ImDrawData;
typedef struct ImDrawList ImDrawList;
typedef struct ImDrawListSharedData ImDrawListSharedData;
typedef struct ImDrawListSplitter ImDrawListSplitter;
typedef struct ImDrawVert ImDrawVert;
typedef struct ImFont ImFont;
typedef struct ImFontAtlas ImFontAtlas;
typedef struct ImFontBuilderIO ImFontBuilderIO;
typedef struct ImFontConfig ImFontConfig;
typedef struct ImFontGlyph ImFontGlyph;
typedef struct ImFontGlyphRangesBuilder ImFontGlyphRangesBuilder;
typedef struct ImColor ImColor;
typedef struct ImGuiContext ImGuiContext;
typedef struct ImGuiIO ImGuiIO;
typedef struct ImGuiInputTextCallbackData ImGuiInputTextCallbackData;
typedef struct ImGuiKeyData ImGuiKeyData;
typedef struct ImGuiListClipper ImGuiListClipper;
typedef struct ImGuiPayload ImGuiPayload;
typedef struct ImGuiPlatformIO ImGuiPlatformIO;
typedef struct ImGuiPlatformMonitor ImGuiPlatformMonitor;
typedef struct ImGuiPlatformImeData ImGuiPlatformImeData;
typedef struct ImGuiSizeCallbackData ImGuiSizeCallbackData;
typedef struct ImGuiStorage ImGuiStorage;
typedef struct ImGuiStyle ImGuiStyle;
typedef struct ImGuiTableSortSpecs ImGuiTableSortSpecs;
typedef struct ImGuiTableColumnSortSpecs ImGuiTableColumnSortSpecs;
typedef struct ImGuiTextBuffer ImGuiTextBuffer;
typedef struct ImGuiTextFilter ImGuiTextFilter;
typedef struct ImGuiViewport ImGuiViewport;
typedef struct ImGuiWindowClass ImGuiWindowClass;

typedef enum {
  ImGuiKey_None = 0,
  ImGuiKey_Tab = 512,
  ImGuiKey_LeftArrow,
  ImGuiKey_RightArrow,
  ImGuiKey_UpArrow,
  ImGuiKey_DownArrow,
  ImGuiKey_PageUp,
  ImGuiKey_PageDown,
  ImGuiKey_Home,
  ImGuiKey_End,
  ImGuiKey_Insert,
  ImGuiKey_Delete,
  ImGuiKey_Backspace,
  ImGuiKey_Space,
  ImGuiKey_Enter,
  ImGuiKey_Escape,
  ImGuiKey_LeftCtrl,
  ImGuiKey_LeftShift,
  ImGuiKey_LeftAlt,
  ImGuiKey_LeftSuper,
  ImGuiKey_RightCtrl,
  ImGuiKey_RightShift,
  ImGuiKey_RightAlt,
  ImGuiKey_RightSuper,
  ImGuiKey_Menu,
  ImGuiKey_0,
  ImGuiKey_1,
  ImGuiKey_2,
  ImGuiKey_3,
  ImGuiKey_4,
  ImGuiKey_5,
  ImGuiKey_6,
  ImGuiKey_7,
  ImGuiKey_8,
  ImGuiKey_9,
  ImGuiKey_A,
  ImGuiKey_B,
  ImGuiKey_C,
  ImGuiKey_D,
  ImGuiKey_E,
  ImGuiKey_F,
  ImGuiKey_G,
  ImGuiKey_H,
  ImGuiKey_I,
  ImGuiKey_J,
  ImGuiKey_K,
  ImGuiKey_L,
  ImGuiKey_M,
  ImGuiKey_N,
  ImGuiKey_O,
  ImGuiKey_P,
  ImGuiKey_Q,
  ImGuiKey_R,
  ImGuiKey_S,
  ImGuiKey_T,
  ImGuiKey_U,
  ImGuiKey_V,
  ImGuiKey_W,
  ImGuiKey_X,
  ImGuiKey_Y,
  ImGuiKey_Z,
  ImGuiKey_F1,
  ImGuiKey_F2,
  ImGuiKey_F3,
  ImGuiKey_F4,
  ImGuiKey_F5,
  ImGuiKey_F6,
  ImGuiKey_F7,
  ImGuiKey_F8,
  ImGuiKey_F9,
  ImGuiKey_F10,
  ImGuiKey_F11,
  ImGuiKey_F12,
  ImGuiKey_Apostrophe,
  ImGuiKey_Comma,
  ImGuiKey_Minus,
  ImGuiKey_Period,
  ImGuiKey_Slash,
  ImGuiKey_Semicolon,
  ImGuiKey_Equal,
  ImGuiKey_LeftBracket,
  ImGuiKey_Backslash,
  ImGuiKey_RightBracket,
  ImGuiKey_GraveAccent,
  ImGuiKey_CapsLock,
  ImGuiKey_ScrollLock,
  ImGuiKey_NumLock,
  ImGuiKey_PrintScreen,
  ImGuiKey_Pause,
  ImGuiKey_Keypad0,
  ImGuiKey_Keypad1,
  ImGuiKey_Keypad2,
  ImGuiKey_Keypad3,
  ImGuiKey_Keypad4,
  ImGuiKey_Keypad5,
  ImGuiKey_Keypad6,
  ImGuiKey_Keypad7,
  ImGuiKey_Keypad8,
  ImGuiKey_Keypad9,
  ImGuiKey_KeypadDecimal,
  ImGuiKey_KeypadDivide,
  ImGuiKey_KeypadMultiply,
  ImGuiKey_KeypadSubtract,
  ImGuiKey_KeypadAdd,
  ImGuiKey_KeypadEnter,
  ImGuiKey_KeypadEqual,
  ImGuiKey_GamepadStart,
  ImGuiKey_GamepadBack,
  ImGuiKey_GamepadFaceLeft,
  ImGuiKey_GamepadFaceRight,
  ImGuiKey_GamepadFaceUp,
  ImGuiKey_GamepadFaceDown,
  ImGuiKey_GamepadDpadLeft,
  ImGuiKey_GamepadDpadRight,
  ImGuiKey_GamepadDpadUp,
  ImGuiKey_GamepadDpadDown,
  ImGuiKey_GamepadL1,
  ImGuiKey_GamepadR1,
  ImGuiKey_GamepadL2,
  ImGuiKey_GamepadR2,
  ImGuiKey_GamepadL3,
  ImGuiKey_GamepadR3,
  ImGuiKey_GamepadLStickLeft,
  ImGuiKey_GamepadLStickRight,
  ImGuiKey_GamepadLStickUp,
  ImGuiKey_GamepadLStickDown,
  ImGuiKey_GamepadRStickLeft,
  ImGuiKey_GamepadRStickRight,
  ImGuiKey_GamepadRStickUp,
  ImGuiKey_GamepadRStickDown,
  ImGuiKey_MouseLeft,
  ImGuiKey_MouseRight,
  ImGuiKey_MouseMiddle,
  ImGuiKey_MouseX1,
  ImGuiKey_MouseX2,
  ImGuiKey_MouseWheelX,
  ImGuiKey_MouseWheelY,
  ImGuiKey_ReservedForModCtrl,
  ImGuiKey_ReservedForModShift,
  ImGuiKey_ReservedForModAlt,
  ImGuiKey_ReservedForModSuper,
  ImGuiKey_COUNT,
  ImGuiMod_None = 0,
  ImGuiMod_Ctrl = 1 << 12,
  ImGuiMod_Shift = 1 << 13,
  ImGuiMod_Alt = 1 << 14,
  ImGuiMod_Super = 1 << 15,
  ImGuiMod_Shortcut = 1 << 11,
  ImGuiMod_Mask_ = 0xF800,
  ImGuiKey_NamedKey_BEGIN = 512,
  ImGuiKey_NamedKey_END = ImGuiKey_COUNT,
  ImGuiKey_NamedKey_COUNT = ImGuiKey_NamedKey_END - ImGuiKey_NamedKey_BEGIN,
  ImGuiKey_KeysData_SIZE = ImGuiKey_COUNT,
  ImGuiKey_KeysData_OFFSET = 0,
  ImGuiKey_ModCtrl = ImGuiMod_Ctrl,
  ImGuiKey_ModShift = ImGuiMod_Shift,
  ImGuiKey_ModAlt = ImGuiMod_Alt,
  ImGuiKey_ModSuper = ImGuiMod_Super,
  ImGuiKey_KeyPadEnter = ImGuiKey_KeypadEnter
} ImGuiKey;

typedef enum {
  ImGuiMouseSource_Mouse = 0,
  ImGuiMouseSource_TouchScreen,
  ImGuiMouseSource_Pen,
  ImGuiMouseSource_COUNT
} ImGuiMouseSource;

typedef int ImGuiCol;
typedef int ImGuiCond;
typedef int ImGuiDataType;
typedef int ImGuiDir;
typedef int ImGuiMouseButton;
typedef int ImGuiMouseCursor;
typedef int ImGuiSortDirection;
typedef int ImGuiStyleVar;
typedef int ImGuiTableBgTarget;
typedef int ImDrawFlags;
typedef int ImDrawListFlags;
typedef int ImFontAtlasFlags;
typedef int ImGuiBackendFlags;
typedef int ImGuiButtonFlags;
typedef int ImGuiColorEditFlags;
typedef int ImGuiConfigFlags;
typedef int ImGuiComboFlags;
typedef int ImGuiDockNodeFlags;
typedef int ImGuiDragDropFlags;
typedef int ImGuiFocusedFlags;
typedef int ImGuiHoveredFlags;
typedef int ImGuiInputTextFlags;
typedef int ImGuiKeyChord;
typedef int ImGuiPopupFlags;
typedef int ImGuiSelectableFlags;
typedef int ImGuiSliderFlags;
typedef int ImGuiTabBarFlags;
typedef int ImGuiTabItemFlags;
typedef int ImGuiTableFlags;
typedef int ImGuiTableColumnFlags;
typedef int ImGuiTableRowFlags;
typedef int ImGuiTreeNodeFlags;
typedef int ImGuiViewportFlags;
typedef int ImGuiWindowFlags;
typedef const void* ImTextureID;
typedef unsigned int        ImGuiID;
typedef signed char         ImS8;
typedef unsigned char       ImU8;
typedef signed short        ImS16;
typedef unsigned short      ImU16;
typedef signed int          ImS32;
typedef unsigned int        ImU32;
typedef signed   long long  ImS64;
typedef unsigned long long  ImU64;
typedef unsigned short ImWchar16;
typedef unsigned int ImWchar32;
typedef ImWchar16 ImWchar;
//typedef int     (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);
//typedef void    (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);
//typedef void*   (*ImGuiMemAllocFunc)(size_t sz, const void* user_data);
//typedef void    (*ImGuiMemFreeFunc)(const void* ptr, const void* user_data);
const ImGuiContext & imgui_GetCurrentContext();
void imgui_SetCurrentContext(const ImGuiContext& ctx);
const ImGuiIO & imgui_GetIO();
const ImGuiStyle & imgui_GetStyle();
void imgui_NewFrame();
void imgui_EndFrame();
void imgui_Render();
const ImDrawData & imgui_GetDrawData();
void imgui_ShowDemoWindow(const bool& p_open);
void imgui_ShowMetricsWindow(const bool& p_open);
void imgui_ShowDebugLogWindow(const bool& p_open);
void imgui_ShowStackToolWindow(const bool& p_open);
void imgui_ShowAboutWindow(const bool& p_open);
void imgui_ShowStyleEditor(const ImGuiStyle& ref);
bool imgui_ShowStyleSelector(const char* label);
void imgui_ShowFontSelector(const char* label);
void imgui_ShowUserGuide();
const char * imgui_GetVersion();
void imgui_StyleColorsDark(const ImGuiStyle& dst);
void imgui_StyleColorsLight(const ImGuiStyle& dst);
void imgui_StyleColorsClassic(const ImGuiStyle& dst);
bool imgui_Begin(const char* name, const bool& p_open, ImGuiWindowFlags flags);
void imgui_End();
bool imgui_BeginChild1(const char* str_id,
 const ImVec2* size,
  bool border,
   ImGuiWindowFlags flags);
bool imgui_BeginChild2(ImGuiID id, const ImVec2* size, bool border, ImGuiWindowFlags flags);
void imgui_EndChild();
bool imgui_IsWindowAppearing();
bool imgui_IsWindowCollapsed();
bool imgui_IsWindowFocused(ImGuiFocusedFlags flags);
bool imgui_IsWindowHovered(ImGuiHoveredFlags flags);
const ImDrawList & imgui_GetWindowDrawList();
float imgui_GetWindowDpiScale();
ImVec2 imgui_GetWindowPos();
ImVec2 imgui_GetWindowSize();
float imgui_GetWindowWidth();
float imgui_GetWindowHeight();
const ImGuiViewport & imgui_GetWindowViewport();
void imgui_SetNextWindowPos(const ImVec2* pos, ImGuiCond cond, const ImVec2* pivot);
void imgui_SetNextWindowSize(const ImVec2* size, ImGuiCond cond);
void imgui_SetNextWindowSizeConstraints(const ImVec2* size_min, const ImVec2* size_max, const void* custom_callback, const void* custom_callback_data);
void imgui_SetNextWindowContentSize(const ImVec2* size);
void imgui_SetNextWindowCollapsed(bool collapsed, ImGuiCond cond);
void imgui_SetNextWindowFocus();
void imgui_SetNextWindowScroll(const ImVec2* scroll);
void imgui_SetNextWindowBgAlpha(float alpha);
void imgui_SetNextWindowViewport(ImGuiID viewport_id);
void imgui_SetWindowPos1(const ImVec2* pos, ImGuiCond cond);
void imgui_SetWindowSize1(const ImVec2* size, ImGuiCond cond);
void imgui_SetWindowCollapsed1(bool collapsed, ImGuiCond cond);
void imgui_SetWindowFocus1();
void imgui_SetWindowFontScale(float scale);
void imgui_SetWindowPos2(const char* name, const ImVec2* pos, ImGuiCond cond);
void imgui_SetWindowSize2(const char* name, const ImVec2* size, ImGuiCond cond);
void imgui_SetWindowCollapsed2(const char* name, bool collapsed, ImGuiCond cond);
void imgui_SetWindowFocus2(const char* name);
ImVec2 imgui_GetContentRegionAvail();
ImVec2 imgui_GetContentRegionMax();
ImVec2 imgui_GetWindowContentRegionMin();
ImVec2 imgui_GetWindowContentRegionMax();
float imgui_GetScrollX();
float imgui_GetScrollY();
void imgui_SetScrollX(float scroll_x);
void imgui_SetScrollY(float scroll_y);
float imgui_GetScrollMaxX();
float imgui_GetScrollMaxY();
void imgui_SetScrollHereX(float center_x_ratio);
void imgui_SetScrollHereY(float center_y_ratio);
void imgui_SetScrollFromPosX(float local_x, float center_x_ratio);
void imgui_SetScrollFromPosY(float local_y, float center_y_ratio);
void imgui_PushFont(const ImFont& font);
void imgui_PopFont();
void imgui_PushStyleColor1(ImGuiCol idx, ImU32 col);
void imgui_PushStyleColor2(ImGuiCol idx, const ImVec4* col);
void imgui_PopStyleColor(int count);
void imgui_PushStyleVar1(ImGuiStyleVar idx, float val);
void imgui_PushStyleVar2(ImGuiStyleVar idx, const ImVec2* val);
void imgui_PopStyleVar(int count);
void imgui_PushTabStop(bool tab_stop);
void imgui_PopTabStop();
void imgui_PushButtonRepeat(bool _repeat);
void imgui_PopButtonRepeat();
void imgui_PushItemWidth(float item_width);
void imgui_PopItemWidth();
void imgui_SetNextItemWidth(float item_width);
float imgui_CalcItemWidth();
void imgui_PushTextWrapPos(float wrap_local_pos_x);
void imgui_PopTextWrapPos();
const ImFont & imgui_GetFont();
float imgui_GetFontSize();
ImVec2 imgui_GetFontTexUvWhitePixel();
ImU32 imgui_GetColorU321(ImGuiCol idx, float alpha_mul);
ImU32 imgui_GetColorU322(const ImVec4* col);
ImU32 imgui_GetColorU323(ImU32 col);
const ImVec4 & imgui_GetStyleColorVec4(ImGuiCol idx);
void imgui_Separator();
void imgui_SameLine(float offset_from_start_x, float spacing);
void imgui_NewLine();
void imgui_Spacing();
void imgui_Dummy(const ImVec2* size);
void imgui_Indent(float indent_w);
void imgui_Unindent(float indent_w);
void imgui_BeginGroup();
void imgui_EndGroup();
ImVec2 imgui_GetCursorPos();
float imgui_GetCursorPosX();
float imgui_GetCursorPosY();
void imgui_SetCursorPos(const ImVec2* local_pos);
void imgui_SetCursorPosX(float local_x);
void imgui_SetCursorPosY(float local_y);
ImVec2 imgui_GetCursorStartPos();
ImVec2 imgui_GetCursorScreenPos();
void imgui_SetCursorScreenPos(const ImVec2* pos);
void imgui_AlignTextToFramePadding();
float imgui_GetTextLineHeight();
float imgui_GetTextLineHeightWithSpacing();
float imgui_GetFrameHeight();
float imgui_GetFrameHeightWithSpacing();
void imgui_PushID1(const char* str_id);
void imgui_PushID2(const char* str_id_begin, const char* str_id_end);
void imgui_PushID3(const void* ptr_id);
void imgui_PushID4(int int_id);
void imgui_PopID();
ImGuiID imgui_GetID1(const char* str_id);
ImGuiID imgui_GetID2(const char* str_id_begin, const char* str_id_end);
ImGuiID imgui_GetID3(const void* ptr_id);
void imgui_TextUnformatted(const char* text, const char* text_end);
void imgui_Text(const char* fmt, ...);
void imgui_TextV(const char* fmt, va_list args);
void imgui_TextColored(const ImVec4* col, const char* fmt, ...);
void imgui_TextColoredV(const ImVec4* col, const char* fmt, va_list args);
void imgui_TextDisabled(const char* fmt, ...);
void imgui_TextDisabledV(const char* fmt, va_list args);
void imgui_TextWrapped(const char* fmt, ...);
void imgui_TextWrappedV(const char* fmt, va_list args);
void imgui_LabelText(const char* label, const char* fmt, ...);
void imgui_LabelTextV(const char* label, const char* fmt, va_list args);
void imgui_BulletText(const char* fmt, ...);
void imgui_BulletTextV(const char* fmt, va_list args);
void imgui_SeparatorText(const char* label);
bool imgui_Button(const char* label, const ImVec2* size);
bool imgui_SmallButton(const char* label);
bool imgui_InvisibleButton(const char* str_id, const ImVec2* size, ImGuiButtonFlags flags);
bool imgui_ArrowButton(const char* str_id, ImGuiDir dir);
bool imgui_Checkbox(const char* label, const bool&v);
bool imgui_CheckboxFlags1(const char* label, const int& flags, int flags_value);
bool imgui_CheckboxFlags2(const char* label, const unsigned int& flags, unsigned int flags_value);
bool imgui_RadioButton1(const char* label, bool active);
bool imgui_RadioButton2(const char* label, const int& v, int v_button);
void imgui_ProgressBar(float fraction, const ImVec2* size_arg, const char* overlay);
void imgui_Bullet();
void imgui_Image(ImTextureID user_texture_id, const ImVec2* size, const ImVec2* uv0, const ImVec2* uv1, const ImVec4* tint_col, const ImVec4* border_col);
bool imgui_ImageButton1(const char* str_id, ImTextureID user_texture_id, const ImVec2* size, const ImVec2* uv0, const ImVec2* uv1, const ImVec4* bg_col, const ImVec4* tint_col);
bool imgui_BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags);
void imgui_EndCombo();
bool imgui_Combo1(const char* label, const int& current_item, const char*const items[], int items_count, int popup_max_height_in_items);
bool imgui_Combo2(const char* label, const int& current_item, const char* items_separated_by_zeros, int popup_max_height_in_items);
//bool imgui_Combo3(const char* label, int& current_item, bool (*items_getter)(const void*, int, const char**), const void* data, int items_count, int popup_max_height_in_items);
bool imgui_DragFloat(const char* label, const float& v, float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragFloatRange2(const char* label, const float& v_current_min, const float& v_current_max, float v_speed, float v_min, float v_max, const char* format, const char* format_max, ImGuiSliderFlags flags);
bool imgui_DragInt(const char* label, const int& v, float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragIntRange2(const char* label, const int& v_current_min, const int& v_current_max, float v_speed, int v_min, int v_max, const char* format, const char* format_max, ImGuiSliderFlags flags);
bool imgui_DragScalar(const char* label, ImGuiDataType data_type, const void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
bool imgui_DragScalarN(const char* label, ImGuiDataType data_type, const void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderFloat(const char* label, const float& v, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderAngle(const char* label, const float& v_rad, float v_degrees_min, float v_degrees_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderInt(const char* label, const int& v, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderScalar(const char* label, ImGuiDataType data_type, const void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
bool imgui_SliderScalarN(const char* label, ImGuiDataType data_type, const void* p_data, int components, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
bool imgui_VSliderFloat(const char* label, const ImVec2* size, const float& v, float v_min, float v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_VSliderInt(const char* label, const ImVec2* size, const int& v, int v_min, int v_max, const char* format, ImGuiSliderFlags flags);
bool imgui_VSliderScalar(const char* label, const ImVec2* size, ImGuiDataType data_type, const void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
//bool imgui_InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, const void* user_data);
//bool imgui_InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2* size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, const void* user_data);
//bool imgui_InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, const void* user_data);
bool imgui_InputFloat(const char* label, const float& v, float step, float step_fast, const char* format, ImGuiInputTextFlags flags);
bool imgui_InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags flags);
bool imgui_InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags flags);
bool imgui_InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags flags);
bool imgui_InputInt(const char* label, const int& v, int step, int step_fast, ImGuiInputTextFlags flags);
bool imgui_InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags);
bool imgui_InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags);
bool imgui_InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags);
bool imgui_InputDouble(const char* label, const double& v, double step, double step_fast, const char* format, ImGuiInputTextFlags flags);
bool imgui_InputScalar(const char* label, ImGuiDataType data_type, const void* p_data, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags);
bool imgui_InputScalarN(const char* label, ImGuiDataType data_type, const void* p_data, int components, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags);
bool imgui_ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags);
bool imgui_ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags);
bool imgui_ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags);
bool imgui_ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float* ref_col);
bool imgui_ColorButton(const char* desc_id, const ImVec4* col, ImGuiColorEditFlags flags, const ImVec2* size);
void imgui_SetColorEditOptions(ImGuiColorEditFlags flags);
bool imgui_TreeNode1(const char* label);
bool imgui_TreeNode2(const char* str_id, const char* fmt, ...);
bool imgui_TreeNode3(const void* ptr_id, const char* fmt, ...);
bool imgui_TreeNodeV1(const char* str_id, const char* fmt, va_list args);
bool imgui_TreeNodeV2(const void* ptr_id, const char* fmt, va_list args);
bool imgui_TreeNodeEx1(const char* label, ImGuiTreeNodeFlags flags);
bool imgui_TreeNodeEx2(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...);
bool imgui_TreeNodeEx3(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...);
bool imgui_TreeNodeExV1(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args);
bool imgui_TreeNodeExV2(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args);
void imgui_TreePush1(const char* str_id);
void imgui_TreePush2(const void* ptr_id);
void imgui_TreePop();
float imgui_GetTreeNodeToLabelSpacing();
bool imgui_CollapsingHeader1(const char* label, ImGuiTreeNodeFlags flags);
bool imgui_CollapsingHeader2(const char* label, const bool&p_visible, ImGuiTreeNodeFlags flags);
void imgui_SetNextItemOpen(bool is_open, ImGuiCond cond);
bool imgui_Selectable1(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2* size);
bool imgui_Selectable2(const char* label, const bool& p_selected, ImGuiSelectableFlags flags, const ImVec2* size);
bool imgui_BeginListBox(const char* label, const ImVec2* size);
void imgui_EndListBox();
bool imgui_ListBox1(const char* label, const int& current_item, const char*const items[], int items_count, int height_in_items);
//bool imgui_ListBox2(const char* label, int& current_item, bool (*items_getter)(const void*, int, const char**), void* data, int items_count, int height_in_items);
void imgui_PlotLines1(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride);
//void imgui_PlotLines2(const char* label, float (*values_getter)(const void*, int), const void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size);
void imgui_PlotHistogram1(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride);
//void imgui_PlotHistogram2(const char* label, float (*values_getter)(const void*, int), const void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size);
void imgui_Value1(const char* prefix, bool b);
void imgui_Value2(const char* prefix, int v);
void imgui_Value3(const char* prefix, unsigned int v);
void imgui_Value4(const char* prefix, float v, const char* float_format);
bool imgui_BeginMenuBar();
void imgui_EndMenuBar();
bool imgui_BeginMainMenuBar();
void imgui_EndMainMenuBar();
bool imgui_BeginMenu(const char* label, bool enabled);
void imgui_EndMenu();
bool imgui_MenuItem1(const char* label, const char* shortcut, bool selected, bool enabled);
bool imgui_MenuItem2(const char* label, const char* shortcut, const bool&p_selected, bool enabled);
bool imgui_BeginTooltip();
void imgui_EndTooltip();
void imgui_SetTooltip(const char* fmt, ...);
void imgui_SetTooltipV(const char* fmt, va_list args);
bool imgui_BeginItemTooltip();
void imgui_SetItemTooltip(const char* fmt, ...);
void imgui_SetItemTooltipV(const char* fmt, va_list args);
bool imgui_BeginPopup(const char* str_id, ImGuiWindowFlags flags);
bool imgui_BeginPopupModal(const char* name, const bool&p_open, ImGuiWindowFlags flags);
void imgui_EndPopup();
void imgui_OpenPopup1(const char* str_id, ImGuiPopupFlags popup_flags);
void imgui_OpenPopup2(ImGuiID id, ImGuiPopupFlags popup_flags);
void imgui_OpenPopupOnItemClick(const char* str_id, ImGuiPopupFlags popup_flags);
void imgui_CloseCurrentPopup();
bool imgui_BeginPopupContextItem(const char* str_id, ImGuiPopupFlags popup_flags);
bool imgui_BeginPopupContextWindow(const char* str_id, ImGuiPopupFlags popup_flags);
bool imgui_BeginPopupContextVoid(const char* str_id, ImGuiPopupFlags popup_flags);
bool imgui_IsPopupOpen(const char* str_id, ImGuiPopupFlags flags);
bool imgui_BeginTable(const char* str_id, int column, ImGuiTableFlags flags, const ImVec2* outer_size, float inner_width);
void imgui_EndTable();
void imgui_TableNextRow(ImGuiTableRowFlags row_flags, float min_row_height);
bool imgui_TableNextColumn();
bool imgui_TableSetColumnIndex(int column_n);
void imgui_TableSetupColumn(const char* label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id);
void imgui_TableSetupScrollFreeze(int cols, int rows);
void imgui_TableHeadersRow();
void imgui_TableHeader(const char* label);
const ImGuiTableSortSpecs & imgui_TableGetSortSpecs();
void imgui_TableSetSortSpecsDirty(bool dirty);
int imgui_TableGetColumnCount();
int imgui_TableGetColumnIndex();
int imgui_TableGetRowIndex();
const char * imgui_TableGetColumnName(int column_n);
ImGuiTableColumnFlags imgui_TableGetColumnFlags(int column_n);
void imgui_TableSetColumnEnabled(int column_n, bool v);
void imgui_TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n);
void imgui_Columns(int count, const char* id, bool border);
void imgui_NextColumn();
int imgui_GetColumnIndex();
float imgui_GetColumnWidth(int column_index);
void imgui_SetColumnWidth(int column_index, float width);
float imgui_GetColumnOffset(int column_index);
void imgui_SetColumnOffset(int column_index, float offset_x);
int imgui_GetColumnsCount();
bool imgui_BeginTabBar(const char* str_id, ImGuiTabBarFlags flags);
void imgui_EndTabBar();
bool imgui_BeginTabItem(const char* label, const bool&p_open, ImGuiTabItemFlags flags);
void imgui_EndTabItem();
bool imgui_TabItemButton(const char* label, ImGuiTabItemFlags flags);
void imgui_SetTabItemClosed(const char* tab_or_docked_window_label);
ImGuiID imgui_DockSpace(ImGuiID id, const ImVec2* size, ImGuiDockNodeFlags flags, const ImGuiWindowClass* window_class);
ImGuiID imgui_DockSpaceOverViewport(const ImGuiViewport& viewport, ImGuiDockNodeFlags flags, const ImGuiWindowClass* window_class);
void imgui_SetNextWindowDockID(ImGuiID dock_id, ImGuiCond cond);
void imgui_SetNextWindowClass(const ImGuiWindowClass* window_class);
ImGuiID imgui_GetWindowDockID();
bool imgui_IsWindowDocked();
void imgui_LogToTTY(int auto_open_depth);
void imgui_LogToClipboard(int auto_open_depth);
void imgui_LogFinish();
void imgui_LogButtons();
bool imgui_BeginDragDropSource(ImGuiDragDropFlags flags);
bool imgui_SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond);
void imgui_EndDragDropSource();
bool imgui_BeginDragDropTarget();
const ImGuiPayload & imgui_AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags);
void imgui_EndDragDropTarget();
const ImGuiPayload & imgui_GetDragDropPayload();
void imgui_BeginDisabled(bool disabled);
void imgui_EndDisabled();
void imgui_PushClipRect(const ImVec2* clip_rect_min, const ImVec2* clip_rect_max, bool intersect_with_current_clip_rect);
void imgui_PopClipRect();
void imgui_SetItemDefaultFocus();
void imgui_SetKeyboardFocusHere(int offset);
void imgui_SetNextItemAllowOverlap();
bool imgui_IsItemHovered(ImGuiHoveredFlags flags);
bool imgui_IsItemActive();
bool imgui_IsItemFocused();
bool imgui_IsItemClicked(ImGuiMouseButton mouse_button);
bool imgui_IsItemVisible();
bool imgui_IsItemEdited();
bool imgui_IsItemActivated();
bool imgui_IsItemDeactivated();
bool imgui_IsItemDeactivatedAfterEdit();
bool imgui_IsItemToggledOpen();
bool imgui_IsAnyItemHovered();
bool imgui_IsAnyItemActive();
bool imgui_IsAnyItemFocused();
ImGuiID imgui_GetItemID();
ImVec2 imgui_GetItemRectMin();
ImVec2 imgui_GetItemRectMax();
ImVec2 imgui_GetItemRectSize();
const ImGuiViewport & imgui_GetMainViewport();
const ImDrawList & imgui_GetBackgroundDrawList1();
const ImDrawList & imgui_GetForegroundDrawList1();
const ImDrawList & imgui_GetBackgroundDrawList2(const ImGuiViewport& viewport);
const ImDrawList & imgui_GetForegroundDrawList2(const ImGuiViewport& viewport);
bool imgui_IsRectVisible1(const ImVec2* size);
bool imgui_IsRectVisible2(const ImVec2* rect_min, const ImVec2* rect_max);
double imgui_GetTime();
int imgui_GetFrameCount();
const ImDrawListSharedData & imgui_GetDrawListSharedData();
const char * imgui_GetStyleColorName(ImGuiCol idx);
void imgui_SetStateStorage(const ImGuiStorage& storage);
const ImGuiStorage & imgui_GetStateStorage();
bool imgui_BeginChildFrame(ImGuiID id, const ImVec2* size, ImGuiWindowFlags flags);
void imgui_EndChildFrame();
ImVec2 imgui_CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width);
ImVec4 imgui_ColorConvertU32ToFloat4(ImU32 _in);
ImU32 imgui_ColorConvertFloat4ToU32(const ImVec4* _in);
void imgui_ColorConvertRGBtoHSV(float r, float g, float b, const float& out_h, const float& out_s, const float& out_v);
void imgui_ColorConvertHSVtoRGB(float h, float s, float v, const float& out_r, const float& out_g, const float& out_b);
bool imgui_IsKeyDown(ImGuiKey key);
bool imgui_IsKeyPressed(ImGuiKey key, bool _repeat);
bool imgui_IsKeyReleased(ImGuiKey key);
int imgui_GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate);
const char * imgui_GetKeyName(ImGuiKey key);
void imgui_SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard);
bool imgui_IsMouseDown(ImGuiMouseButton button);
bool imgui_IsMouseClicked(ImGuiMouseButton button, bool _repeat);
bool imgui_IsMouseReleased(ImGuiMouseButton button);
bool imgui_IsMouseDoubleClicked(ImGuiMouseButton button);
int imgui_GetMouseClickedCount(ImGuiMouseButton button);
bool imgui_IsMouseHoveringRect(const ImVec2* r_min, const ImVec2* r_max, bool clip);
bool imgui_IsMousePosValid(const ImVec2* mouse_pos);
bool imgui_IsAnyMouseDown();
ImVec2 imgui_GetMousePos();
ImVec2 imgui_GetMousePosOnOpeningCurrentPopup();
bool imgui_IsMouseDragging(ImGuiMouseButton button, float lock_threshold);
ImVec2 imgui_GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold);
void imgui_ResetMouseDragDelta(ImGuiMouseButton button);
ImGuiMouseCursor imgui_GetMouseCursor();
void imgui_SetMouseCursor(ImGuiMouseCursor cursor_type);
void imgui_SetNextFrameWantCaptureMouse(bool want_capture_mouse);
const char * imgui_GetClipboardText();
void imgui_SetClipboardText(const char* text);
void imgui_DebugTextEncoding(const char* text);
bool imgui_DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx);
//void imgui_GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func, const void** p_user_data);
const ImGuiPlatformIO & imgui_GetPlatformIO();
void imgui_UpdatePlatformWindows();
void imgui_RenderPlatformWindowsDefault(const void* platform_render_arg, const void* renderer_render_arg);
void imgui_DestroyPlatformWindows();
const ImGuiViewport & imgui_FindViewportByID(ImGuiID id);
const ImGuiViewport & imgui_FindViewportByPlatformHandle(const void* platform_handle);

typedef enum {
  ImGuiWindowFlags_None = 0,
  ImGuiWindowFlags_NoTitleBar = 1 << 0,
  ImGuiWindowFlags_NoResize = 1 << 1,
  ImGuiWindowFlags_NoMove = 1 << 2,
  ImGuiWindowFlags_NoScrollbar = 1 << 3,
  ImGuiWindowFlags_NoScrollWithMouse = 1 << 4,
  ImGuiWindowFlags_NoCollapse = 1 << 5,
  ImGuiWindowFlags_AlwaysAutoResize = 1 << 6,
  ImGuiWindowFlags_NoBackground = 1 << 7,
  ImGuiWindowFlags_NoSavedSettings = 1 << 8,
  ImGuiWindowFlags_NoMouseInputs = 1 << 9,
  ImGuiWindowFlags_MenuBar = 1 << 10,
  ImGuiWindowFlags_HorizontalScrollbar = 1 << 11,
  ImGuiWindowFlags_NoFocusOnAppearing = 1 << 12,
  ImGuiWindowFlags_NoBringToFrontOnFocus = 1 << 13,
  ImGuiWindowFlags_AlwaysVerticalScrollbar = 1 << 14,
  ImGuiWindowFlags_AlwaysHorizontalScrollbar = 1<< 15,
  ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,
  ImGuiWindowFlags_NoNavInputs = 1 << 18,
  ImGuiWindowFlags_NoNavFocus = 1 << 19,
  ImGuiWindowFlags_UnsavedDocument = 1 << 20,
  ImGuiWindowFlags_NoDocking = 1 << 21,
  ImGuiWindowFlags_NoNav = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
  ImGuiWindowFlags_NoDecoration = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,
  ImGuiWindowFlags_NoInputs = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
  ImGuiWindowFlags_NavFlattened = 1 << 23,
  ImGuiWindowFlags_ChildWindow = 1 << 24,
  ImGuiWindowFlags_Tooltip = 1 << 25,
  ImGuiWindowFlags_Popup = 1 << 26,
  ImGuiWindowFlags_Modal = 1 << 27,
  ImGuiWindowFlags_ChildMenu = 1 << 28,
  ImGuiWindowFlags_DockNodeHost = 1 << 29
} ImGuiWindowFlags_;

typedef enum {
  ImGuiInputTextFlags_None = 0,
  ImGuiInputTextFlags_CharsDecimal = 1 << 0,
  ImGuiInputTextFlags_CharsHexadecimal = 1 << 1,
  ImGuiInputTextFlags_CharsUppercase = 1 << 2,
  ImGuiInputTextFlags_CharsNoBlank = 1 << 3,
  ImGuiInputTextFlags_AutoSelectAll = 1 << 4,
  ImGuiInputTextFlags_EnterReturnsTrue = 1 << 5,
  ImGuiInputTextFlags_CallbackCompletion = 1 << 6,
  ImGuiInputTextFlags_CallbackHistory = 1 << 7,
  ImGuiInputTextFlags_CallbackAlways = 1 << 8,
  ImGuiInputTextFlags_CallbackCharFilter = 1 << 9,
  ImGuiInputTextFlags_AllowTabInput = 1 << 10,
  ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,
  ImGuiInputTextFlags_NoHorizontalScroll = 1 << 12,
  ImGuiInputTextFlags_AlwaysOverwrite = 1 << 13,
  ImGuiInputTextFlags_ReadOnly = 1 << 14,
  ImGuiInputTextFlags_Password = 1 << 15,
  ImGuiInputTextFlags_NoUndoRedo = 1 << 16,
  ImGuiInputTextFlags_CharsScientific = 1 << 17,
  ImGuiInputTextFlags_CallbackResize = 1 << 18,
  ImGuiInputTextFlags_CallbackEdit = 1 << 19,
  ImGuiInputTextFlags_EscapeClearsAll = 1 << 20
} ImGuiInputTextFlags_;

typedef enum {
  ImGuiTreeNodeFlags_None = 0,
  ImGuiTreeNodeFlags_Selected = 1 << 0,
  ImGuiTreeNodeFlags_Framed = 1 << 1,
  ImGuiTreeNodeFlags_AllowOverlap = 1 << 2,
  ImGuiTreeNodeFlags_NoTreePushOnOpen = 1 << 3,
  ImGuiTreeNodeFlags_NoAutoOpenOnLog = 1 << 4,
  ImGuiTreeNodeFlags_DefaultOpen = 1 << 5,
  ImGuiTreeNodeFlags_OpenOnDoubleClick = 1 << 6,
  ImGuiTreeNodeFlags_OpenOnArrow = 1 << 7,
  ImGuiTreeNodeFlags_Leaf = 1 << 8,
  ImGuiTreeNodeFlags_Bullet = 1 << 9,
  ImGuiTreeNodeFlags_FramePadding = 1 << 10,
  ImGuiTreeNodeFlags_SpanAvailWidth = 1 << 11,
  ImGuiTreeNodeFlags_SpanFullWidth = 1 << 12,
  ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,
  ImGuiTreeNodeFlags_CollapsingHeader = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog,
  ImGuiTreeNodeFlags_AllowItemOverlap = ImGuiTreeNodeFlags_AllowOverlap
} ImGuiTreeNodeFlags_;

typedef enum {
  ImGuiPopupFlags_None = 0,
  ImGuiPopupFlags_MouseButtonLeft = 0,
  ImGuiPopupFlags_MouseButtonRight = 1,
  ImGuiPopupFlags_MouseButtonMiddle = 2,
  ImGuiPopupFlags_MouseButtonMask_ = 0x1F,
  ImGuiPopupFlags_MouseButtonDefault_ = 1,
  ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 5,
  ImGuiPopupFlags_NoOpenOverItems = 1 << 6,
  ImGuiPopupFlags_AnyPopupId = 1 << 7,
  ImGuiPopupFlags_AnyPopupLevel = 1 << 8,
  ImGuiPopupFlags_AnyPopup = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel
} ImGuiPopupFlags_;

typedef enum {
  ImGuiSelectableFlags_None = 0,
  ImGuiSelectableFlags_DontClosePopups = 1 << 0,
  ImGuiSelectableFlags_SpanAllColumns = 1 << 1,
  ImGuiSelectableFlags_AllowDoubleClick = 1 << 2,
  ImGuiSelectableFlags_Disabled = 1 << 3,
  ImGuiSelectableFlags_AllowOverlap = 1 << 4,
  ImGuiSelectableFlags_AllowItemOverlap = ImGuiSelectableFlags_AllowOverlap
} ImGuiSelectableFlags_;

typedef enum {
  ImGuiComboFlags_None = 0,
  ImGuiComboFlags_PopupAlignLeft = 1 << 0,
  ImGuiComboFlags_HeightSmall = 1 << 1,
  ImGuiComboFlags_HeightRegular = 1 << 2,
  ImGuiComboFlags_HeightLarge = 1 << 3,
  ImGuiComboFlags_HeightLargest = 1 << 4,
  ImGuiComboFlags_NoArrowButton = 1 << 5,
  ImGuiComboFlags_NoPreview = 1 << 6,
  ImGuiComboFlags_HeightMask_ = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest
} ImGuiComboFlags_;

typedef enum {
  ImGuiTabBarFlags_None = 0,
  ImGuiTabBarFlags_Reorderable = 1 << 0,
  ImGuiTabBarFlags_AutoSelectNewTabs = 1 << 1,
  ImGuiTabBarFlags_TabListPopupButton = 1 << 2,
  ImGuiTabBarFlags_NoCloseWithMiddleMouseButton = 1 << 3,
  ImGuiTabBarFlags_NoTabListScrollingButtons = 1 << 4,
  ImGuiTabBarFlags_NoTooltip = 1 << 5,
  ImGuiTabBarFlags_FittingPolicyResizeDown = 1 << 6,
  ImGuiTabBarFlags_FittingPolicyScroll = 1 << 7,
  ImGuiTabBarFlags_FittingPolicyMask_ = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll,
  ImGuiTabBarFlags_FittingPolicyDefault_ = ImGuiTabBarFlags_FittingPolicyResizeDown
} ImGuiTabBarFlags_;

typedef enum {
  ImGuiTabItemFlags_None = 0,
  ImGuiTabItemFlags_UnsavedDocument = 1 << 0,
  ImGuiTabItemFlags_SetSelected = 1 << 1,
  ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 1 << 2,
  ImGuiTabItemFlags_NoPushId = 1 << 3,
  ImGuiTabItemFlags_NoTooltip = 1 << 4,
  ImGuiTabItemFlags_NoReorder = 1 << 5,
  ImGuiTabItemFlags_Leading = 1 << 6,
  ImGuiTabItemFlags_Trailing = 1 << 7
} ImGuiTabItemFlags_;

typedef enum {
  ImGuiTableFlags_None = 0,
  ImGuiTableFlags_Resizable = 1 << 0,
  ImGuiTableFlags_Reorderable = 1 << 1,
  ImGuiTableFlags_Hideable = 1 << 2,
  ImGuiTableFlags_Sortable = 1 << 3,
  ImGuiTableFlags_NoSavedSettings = 1 << 4,
  ImGuiTableFlags_ContextMenuInBody = 1 << 5,
  ImGuiTableFlags_RowBg = 1 << 6,
  ImGuiTableFlags_BordersInnerH = 1 << 7,
  ImGuiTableFlags_BordersOuterH = 1 << 8,
  ImGuiTableFlags_BordersInnerV = 1 << 9,
  ImGuiTableFlags_BordersOuterV = 1 << 10,
  ImGuiTableFlags_BordersH = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersOuterH,
  ImGuiTableFlags_BordersV = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersOuterV,
  ImGuiTableFlags_BordersInner = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInnerH,
  ImGuiTableFlags_BordersOuter = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags_BordersOuterH,
  ImGuiTableFlags_Borders = ImGuiTableFlags_BordersInner | ImGuiTableFlags_BordersOuter,
  ImGuiTableFlags_NoBordersInBody = 1 << 11,
  ImGuiTableFlags_NoBordersInBodyUntilResize = 1 << 12,
  ImGuiTableFlags_SizingFixedFit = 1 << 13,
  ImGuiTableFlags_SizingFixedSame = 2 << 13,
  ImGuiTableFlags_SizingStretchProp = 3 << 13,
  ImGuiTableFlags_SizingStretchSame = 4 << 13,
  ImGuiTableFlags_NoHostExtendX = 1 << 16,
  ImGuiTableFlags_NoHostExtendY = 1 << 17,
  ImGuiTableFlags_NoKeepColumnsVisible = 1 << 18,
  ImGuiTableFlags_PreciseWidths = 1 << 19,
  ImGuiTableFlags_NoClip = 1 << 20,
  ImGuiTableFlags_PadOuterX = 1 << 21,
  ImGuiTableFlags_NoPadOuterX = 1 << 22,
  ImGuiTableFlags_NoPadInnerX = 1 << 23,
  ImGuiTableFlags_ScrollX = 1 << 24,
  ImGuiTableFlags_ScrollY = 1 << 25,
  ImGuiTableFlags_SortMulti = 1 << 26,
  ImGuiTableFlags_SortTristate = 1 << 27,
  ImGuiTableFlags_SizingMask_ = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_SizingFixedSame | ImGuiTableFlags_SizingStretchProp | ImGuiTableFlags_SizingStretchSame
} ImGuiTableFlags_;

typedef enum {
  ImGuiTableColumnFlags_None = 0,
  ImGuiTableColumnFlags_Disabled = 1 << 0,
  ImGuiTableColumnFlags_DefaultHide = 1 << 1,
  ImGuiTableColumnFlags_DefaultSort = 1 << 2,
  ImGuiTableColumnFlags_WidthStretch = 1 << 3,
  ImGuiTableColumnFlags_WidthFixed = 1 << 4,
  ImGuiTableColumnFlags_NoResize = 1 << 5,
  ImGuiTableColumnFlags_NoReorder = 1 << 6,
  ImGuiTableColumnFlags_NoHide = 1 << 7,
  ImGuiTableColumnFlags_NoClip = 1 << 8,
  ImGuiTableColumnFlags_NoSort = 1 << 9,
  ImGuiTableColumnFlags_NoSortAscending = 1 << 10,
  ImGuiTableColumnFlags_NoSortDescending = 1 << 11,
  ImGuiTableColumnFlags_NoHeaderLabel = 1 << 12,
  ImGuiTableColumnFlags_NoHeaderWidth = 1 << 13,
  ImGuiTableColumnFlags_PreferSortAscending = 1 << 14,
  ImGuiTableColumnFlags_PreferSortDescending = 1 << 15,
  ImGuiTableColumnFlags_IndentEnable = 1 << 16,
  ImGuiTableColumnFlags_IndentDisable = 1 << 17,
  ImGuiTableColumnFlags_IsEnabled = 1 << 24,
  ImGuiTableColumnFlags_IsVisible = 1 << 25,
  ImGuiTableColumnFlags_IsSorted = 1 << 26,
  ImGuiTableColumnFlags_IsHovered = 1 << 27,
  ImGuiTableColumnFlags_WidthMask_ = ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_WidthFixed,
  ImGuiTableColumnFlags_IndentMask_ = ImGuiTableColumnFlags_IndentEnable | ImGuiTableColumnFlags_IndentDisable,
  ImGuiTableColumnFlags_StatusMask_ = ImGuiTableColumnFlags_IsEnabled | ImGuiTableColumnFlags_IsVisible | ImGuiTableColumnFlags_IsSorted | ImGuiTableColumnFlags_IsHovered,
  ImGuiTableColumnFlags_NoDirectResize_ = 1 << 30
} ImGuiTableColumnFlags_;

typedef enum {
  ImGuiTableRowFlags_None = 0,
  ImGuiTableRowFlags_Headers = 1 << 0
} ImGuiTableRowFlags_;

typedef enum {
  ImGuiTableBgTarget_None = 0,
  ImGuiTableBgTarget_RowBg0 = 1,
  ImGuiTableBgTarget_RowBg1 = 2,
  ImGuiTableBgTarget_CellBg = 3
} ImGuiTableBgTarget_;

typedef enum {
  ImGuiFocusedFlags_None = 0,
  ImGuiFocusedFlags_ChildWindows = 1 << 0,
  ImGuiFocusedFlags_RootWindow = 1 << 1,
  ImGuiFocusedFlags_AnyWindow = 1 << 2,
  ImGuiFocusedFlags_NoPopupHierarchy = 1 << 3,
  ImGuiFocusedFlags_DockHierarchy = 1 << 4,
  ImGuiFocusedFlags_RootAndChildWindows = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows
} ImGuiFocusedFlags_;

typedef enum {
  ImGuiHoveredFlags_None = 0,
  ImGuiHoveredFlags_ChildWindows = 1 << 0,
  ImGuiHoveredFlags_RootWindow = 1 << 1,
  ImGuiHoveredFlags_AnyWindow = 1 << 2,
  ImGuiHoveredFlags_NoPopupHierarchy = 1 << 3,
  ImGuiHoveredFlags_DockHierarchy = 1 << 4,
  ImGuiHoveredFlags_AllowWhenBlockedByPopup = 1 << 5,
  ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 1 << 7,
  ImGuiHoveredFlags_AllowWhenOverlappedByItem = 1 << 8,
  ImGuiHoveredFlags_AllowWhenOverlappedByWindow = 1 << 9,
  ImGuiHoveredFlags_AllowWhenDisabled = 1 << 10,
  ImGuiHoveredFlags_NoNavOverride = 1 << 11,
  ImGuiHoveredFlags_AllowWhenOverlapped = ImGuiHoveredFlags_AllowWhenOverlappedByItem | ImGuiHoveredFlags_AllowWhenOverlappedByWindow,
  ImGuiHoveredFlags_RectOnly = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,
  ImGuiHoveredFlags_RootAndChildWindows = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows,
  ImGuiHoveredFlags_ForTooltip = 1 << 11,
  ImGuiHoveredFlags_Stationary = 1 << 12,
  ImGuiHoveredFlags_DelayNone = 1 << 13,
  ImGuiHoveredFlags_DelayShort = 1 << 14,
  ImGuiHoveredFlags_DelayNormal = 1 << 15,
  ImGuiHoveredFlags_NoSharedDelay = 1 << 16
} ImGuiHoveredFlags_;

typedef enum {
  ImGuiDockNodeFlags_None = 0,
  ImGuiDockNodeFlags_KeepAliveOnly = 1 << 0,
  ImGuiDockNodeFlags_NoDockingInCentralNode = 1 << 2,
  ImGuiDockNodeFlags_PassthruCentralNode = 1 << 3,
  ImGuiDockNodeFlags_NoSplit = 1 << 4,
  ImGuiDockNodeFlags_NoResize = 1 << 5,
  ImGuiDockNodeFlags_AutoHideTabBar = 1 << 6
} ImGuiDockNodeFlags_;

typedef enum {
  ImGuiDragDropFlags_None = 0,
  ImGuiDragDropFlags_SourceNoPreviewTooltip = 1 << 0,
  ImGuiDragDropFlags_SourceNoDisableHover = 1 << 1,
  ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 1 << 2,
  ImGuiDragDropFlags_SourceAllowNullID = 1 << 3,
  ImGuiDragDropFlags_SourceExtern = 1 << 4,
  ImGuiDragDropFlags_SourceAutoExpirePayload = 1 << 5,
  ImGuiDragDropFlags_AcceptBeforeDelivery = 1 << 10,
  ImGuiDragDropFlags_AcceptNoDrawDefaultRect = 1 << 11,
  ImGuiDragDropFlags_AcceptNoPreviewTooltip = 1 << 12,
  ImGuiDragDropFlags_AcceptPeekOnly = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect
} ImGuiDragDropFlags_;

typedef enum {
  ImGuiDataType_S8,
  ImGuiDataType_U8,
  ImGuiDataType_S16,
  ImGuiDataType_U16,
  ImGuiDataType_S32,
  ImGuiDataType_U32,
  ImGuiDataType_S64,
  ImGuiDataType_U64,
  ImGuiDataType_Float,
  ImGuiDataType_Double,
  ImGuiDataType_COUNT
} ImGuiDataType_;

typedef enum {
  ImGuiDir_None = -1,
  ImGuiDir_Left = 0,
  ImGuiDir_Right = 1,
  ImGuiDir_Up = 2,
  ImGuiDir_Down = 3,
  ImGuiDir_COUNT
} ImGuiDir_;

typedef enum {
  ImGuiSortDirection_None = 0,
  ImGuiSortDirection_Ascending = 1,
  ImGuiSortDirection_Descending = 2
} ImGuiSortDirection_;

typedef enum {
  ImGuiNavInput_Activate,
  ImGuiNavInput_Cancel,
  ImGuiNavInput_Input,
  ImGuiNavInput_Menu,
  ImGuiNavInput_DpadLeft,
  ImGuiNavInput_DpadRight,
  ImGuiNavInput_DpadUp,
  ImGuiNavInput_DpadDown,
  ImGuiNavInput_LStickLeft,
  ImGuiNavInput_LStickRight,
  ImGuiNavInput_LStickUp,
  ImGuiNavInput_LStickDown,
  ImGuiNavInput_FocusPrev,
  ImGuiNavInput_FocusNext,
  ImGuiNavInput_TweakSlow,
  ImGuiNavInput_TweakFast,
  ImGuiNavInput_COUNT
} ImGuiNavInput;

typedef enum {
  ImGuiConfigFlags_None = 0,
  ImGuiConfigFlags_NavEnableKeyboard = 1 << 0,
  ImGuiConfigFlags_NavEnableGamepad = 1 << 1,
  ImGuiConfigFlags_NavEnableSetMousePos = 1 << 2,
  ImGuiConfigFlags_NavNoCaptureKeyboard = 1 << 3,
  ImGuiConfigFlags_NoMouse = 1 << 4,
  ImGuiConfigFlags_NoMouseCursorChange = 1 << 5,
  ImGuiConfigFlags_DockingEnable = 1 << 6,
  ImGuiConfigFlags_ViewportsEnable = 1 << 10,
  ImGuiConfigFlags_DpiEnableScaleViewports = 1 << 14,
  ImGuiConfigFlags_DpiEnableScaleFonts = 1 << 15,
  ImGuiConfigFlags_IsSRGB = 1 << 20,
  ImGuiConfigFlags_IsTouchScreen = 1 << 21
} ImGuiConfigFlags_;

typedef enum {
  ImGuiBackendFlags_None = 0,
  ImGuiBackendFlags_HasGamepad = 1 << 0,
  ImGuiBackendFlags_HasMouseCursors = 1 << 1,
  ImGuiBackendFlags_HasSetMousePos = 1 << 2,
  ImGuiBackendFlags_RendererHasVtxOffset = 1 << 3,
  ImGuiBackendFlags_PlatformHasViewports = 1 << 10,
  ImGuiBackendFlags_HasMouseHoveredViewport = 1 << 11,
  ImGuiBackendFlags_RendererHasViewports = 1 << 12
} ImGuiBackendFlags_;

typedef enum {
  ImGuiCol_Text,
  ImGuiCol_TextDisabled,
  ImGuiCol_WindowBg,
  ImGuiCol_ChildBg,
  ImGuiCol_PopupBg,
  ImGuiCol_Border,
  ImGuiCol_BorderShadow,
  ImGuiCol_FrameBg,
  ImGuiCol_FrameBgHovered,
  ImGuiCol_FrameBgActive,
  ImGuiCol_TitleBg,
  ImGuiCol_TitleBgActive,
  ImGuiCol_TitleBgCollapsed,
  ImGuiCol_MenuBarBg,
  ImGuiCol_ScrollbarBg,
  ImGuiCol_ScrollbarGrab,
  ImGuiCol_ScrollbarGrabHovered,
  ImGuiCol_ScrollbarGrabActive,
  ImGuiCol_CheckMark,
  ImGuiCol_SliderGrab,
  ImGuiCol_SliderGrabActive,
  ImGuiCol_Button,
  ImGuiCol_ButtonHovered,
  ImGuiCol_ButtonActive,
  ImGuiCol_Header,
  ImGuiCol_HeaderHovered,
  ImGuiCol_HeaderActive,
  ImGuiCol_Separator,
  ImGuiCol_SeparatorHovered,
  ImGuiCol_SeparatorActive,
  ImGuiCol_ResizeGrip,
  ImGuiCol_ResizeGripHovered,
  ImGuiCol_ResizeGripActive,
  ImGuiCol_Tab,
  ImGuiCol_TabHovered,
  ImGuiCol_TabActive,
  ImGuiCol_TabUnfocused,
  ImGuiCol_TabUnfocusedActive,
  ImGuiCol_DockingPreview,
  ImGuiCol_DockingEmptyBg,
  ImGuiCol_PlotLines,
  ImGuiCol_PlotLinesHovered,
  ImGuiCol_PlotHistogram,
  ImGuiCol_PlotHistogramHovered,
  ImGuiCol_TableHeaderBg,
  ImGuiCol_TableBorderStrong,
  ImGuiCol_TableBorderLight,
  ImGuiCol_TableRowBg,
  ImGuiCol_TableRowBgAlt,
  ImGuiCol_TextSelectedBg,
  ImGuiCol_DragDropTarget,
  ImGuiCol_NavHighlight,
  ImGuiCol_NavWindowingHighlight,
  ImGuiCol_NavWindowingDimBg,
  ImGuiCol_ModalWindowDimBg,
  ImGuiCol_COUNT
} ImGuiCol_;

typedef enum {
  ImGuiStyleVar_Alpha,
  ImGuiStyleVar_DisabledAlpha,
  ImGuiStyleVar_WindowPadding,
  ImGuiStyleVar_WindowRounding,
  ImGuiStyleVar_WindowBorderSize,
  ImGuiStyleVar_WindowMinSize,
  ImGuiStyleVar_WindowTitleAlign,
  ImGuiStyleVar_ChildRounding,
  ImGuiStyleVar_ChildBorderSize,
  ImGuiStyleVar_PopupRounding,
  ImGuiStyleVar_PopupBorderSize,
  ImGuiStyleVar_FramePadding,
  ImGuiStyleVar_FrameRounding,
  ImGuiStyleVar_FrameBorderSize,
  ImGuiStyleVar_ItemSpacing,
  ImGuiStyleVar_ItemInnerSpacing,
  ImGuiStyleVar_IndentSpacing,
  ImGuiStyleVar_CellPadding,
  ImGuiStyleVar_ScrollbarSize,
  ImGuiStyleVar_ScrollbarRounding,
  ImGuiStyleVar_GrabMinSize,
  ImGuiStyleVar_GrabRounding,
  ImGuiStyleVar_TabRounding,
  ImGuiStyleVar_ButtonTextAlign,
  ImGuiStyleVar_SelectableTextAlign,
  ImGuiStyleVar_SeparatorTextBorderSize,
  ImGuiStyleVar_SeparatorTextAlign,
  ImGuiStyleVar_SeparatorTextPadding,
  ImGuiStyleVar_DockingSeparatorSize,
  ImGuiStyleVar_COUNT
} ImGuiStyleVar_;

typedef enum {
  ImGuiButtonFlags_None = 0,
  ImGuiButtonFlags_MouseButtonLeft = 1 << 0,
  ImGuiButtonFlags_MouseButtonRight = 1 << 1,
  ImGuiButtonFlags_MouseButtonMiddle = 1 << 2,
  ImGuiButtonFlags_MouseButtonMask_ = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight | ImGuiButtonFlags_MouseButtonMiddle,
  ImGuiButtonFlags_MouseButtonDefault_ = ImGuiButtonFlags_MouseButtonLeft
} ImGuiButtonFlags_;

typedef enum {
  ImGuiColorEditFlags_None = 0,
  ImGuiColorEditFlags_NoAlpha = 1 << 1,
  ImGuiColorEditFlags_NoPicker = 1 << 2,
  ImGuiColorEditFlags_NoOptions = 1 << 3,
  ImGuiColorEditFlags_NoSmallPreview = 1 << 4,
  ImGuiColorEditFlags_NoInputs = 1 << 5,
  ImGuiColorEditFlags_NoTooltip = 1 << 6,
  ImGuiColorEditFlags_NoLabel = 1 << 7,
  ImGuiColorEditFlags_NoSidePreview = 1 << 8,
  ImGuiColorEditFlags_NoDragDrop = 1 << 9,
  ImGuiColorEditFlags_NoBorder = 1 << 10,
  ImGuiColorEditFlags_AlphaBar = 1 << 16,
  ImGuiColorEditFlags_AlphaPreview = 1 << 17,
  ImGuiColorEditFlags_AlphaPreviewHalf = 1 << 18,
  ImGuiColorEditFlags_HDR = 1 << 19,
  ImGuiColorEditFlags_DisplayRGB = 1 << 20,
  ImGuiColorEditFlags_DisplayHSV = 1 << 21,
  ImGuiColorEditFlags_DisplayHex = 1 << 22,
  ImGuiColorEditFlags_Uint8 = 1 << 23,
  ImGuiColorEditFlags_Float = 1 << 24,
  ImGuiColorEditFlags_PickerHueBar = 1 << 25,
  ImGuiColorEditFlags_PickerHueWheel = 1 << 26,
  ImGuiColorEditFlags_InputRGB = 1 << 27,
  ImGuiColorEditFlags_InputHSV = 1 << 28,
  ImGuiColorEditFlags_DefaultOptions_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_PickerHueBar,
  ImGuiColorEditFlags_DisplayMask_ = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_DisplayHex,
  ImGuiColorEditFlags_DataTypeMask_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,
  ImGuiColorEditFlags_PickerMask_ = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_PickerHueBar,
  ImGuiColorEditFlags_InputMask_ = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_InputHSV
} ImGuiColorEditFlags_;

typedef enum {
  ImGuiSliderFlags_None = 0,
  ImGuiSliderFlags_AlwaysClamp = 1 << 4,
  ImGuiSliderFlags_Logarithmic = 1 << 5,
  ImGuiSliderFlags_NoRoundToFormat = 1 << 6,
  ImGuiSliderFlags_NoInput = 1 << 7,
  ImGuiSliderFlags_InvalidMask_ = 0x7000000F
} ImGuiSliderFlags_;

typedef enum {
  ImGuiMouseButton_Left = 0,
  ImGuiMouseButton_Right = 1,
  ImGuiMouseButton_Middle = 2,
  ImGuiMouseButton_COUNT = 5
} ImGuiMouseButton_;

typedef enum {
  ImGuiMouseCursor_None = -1,
  ImGuiMouseCursor_Arrow = 0,
  ImGuiMouseCursor_TextInput,
  ImGuiMouseCursor_ResizeAll,
  ImGuiMouseCursor_ResizeNS,
  ImGuiMouseCursor_ResizeEW,
  ImGuiMouseCursor_ResizeNESW,
  ImGuiMouseCursor_ResizeNWSE,
  ImGuiMouseCursor_Hand,
  ImGuiMouseCursor_NotAllowed,
  ImGuiMouseCursor_COUNT
} ImGuiMouseCursor_;

typedef enum {
  ImGuiCond_None = 0,
  ImGuiCond_Always = 1 << 0,
  ImGuiCond_Once = 1 << 1,
  ImGuiCond_FirstUseEver = 1 << 2,
  ImGuiCond_Appearing = 1 << 3
} ImGuiCond_;
typedef struct ImNewWrapper {
} ImNewWrapper;
typedef struct ImGuiStyle {
  float Alpha;
  float DisabledAlpha;
  ImVec2 WindowPadding;
  float WindowRounding;
  float WindowBorderSize;
  ImVec2 WindowMinSize;
  ImVec2 WindowTitleAlign;
  ImGuiDir WindowMenuButtonPosition;
  float ChildRounding;
  float ChildBorderSize;
  float PopupRounding;
  float PopupBorderSize;
  ImVec2 FramePadding;
  float FrameRounding;
  float FrameBorderSize;
  ImVec2 ItemSpacing;
  ImVec2 ItemInnerSpacing;
  ImVec2 CellPadding;
  ImVec2 TouchExtraPadding;
  float IndentSpacing;
  float ColumnsMinSpacing;
  float ScrollbarSize;
  float ScrollbarRounding;
  float GrabMinSize;
  float GrabRounding;
  float LogSliderDeadzone;
  float TabRounding;
  float TabBorderSize;
  float TabMinWidthForCloseButton;
  ImGuiDir ColorButtonPosition;
  ImVec2 ButtonTextAlign;
  ImVec2 SelectableTextAlign;
  float SeparatorTextBorderSize;
  ImVec2 SeparatorTextAlign;
  ImVec2 SeparatorTextPadding;
  ImVec2 DisplayWindowPadding;
  ImVec2 DisplaySafeAreaPadding;
  float DockingSeparatorSize;
  float MouseCursorScale;
  bool AntiAliasedLines;
  bool AntiAliasedLinesUseTex;
  bool AntiAliasedFill;
  float CurveTessellationTol;
  float CircleTessellationMaxError;
  ImVec4 Colors[55];
  float HoverStationaryDelay;
  float HoverDelayShort;
  float HoverDelayNormal;
  ImGuiHoveredFlags HoverFlagsForTooltipMouse;
  ImGuiHoveredFlags HoverFlagsForTooltipNav;
} ImGuiStyle;
// void imgui_ImGuiStyle();
void imgui_ImGuiStyle_ScaleAllSizes(const ImGuiStyle& ImGuiStyle_ctx, float scale_factor);
typedef struct ImGuiKeyData {
  bool Down;
  float DownDuration;
  float DownDurationPrev;
  float AnalogValue;
} ImGuiKeyData;
typedef struct ImGuiIO {
  ImGuiConfigFlags ConfigFlags;
  ImGuiBackendFlags BackendFlags;
  ImVec2 DisplaySize;
  float DeltaTime;
  float IniSavingRate;
  const char* IniFilename;
  const char* LogFilename;
  const void* UserData;
  const ImFontAtlas& Fonts;
  float FontGlobalScale;
  bool FontAllowUserScaling;
  const ImFont& FontDefault;
  ImVec2 DisplayFramebufferScale;
  bool ConfigDockingNoSplit;
  bool ConfigDockingWithShift;
  bool ConfigDockingAlwaysTabBar;
  bool ConfigDockingTransparentPayload;
  bool ConfigViewportsNoAutoMerge;
  bool ConfigViewportsNoTaskBarIcon;
  bool ConfigViewportsNoDecoration;
  bool ConfigViewportsNoDefaultParent;
  bool MouseDrawCursor;
  bool ConfigMacOSXBehaviors;
  bool ConfigInputTrickleEventQueue;
  bool ConfigInputTextCursorBlink;
  bool ConfigInputTextEnterKeepActive;
  bool ConfigDragClickToInputText;
  bool ConfigWindowsResizeFromEdges;
  bool ConfigWindowsMoveFromTitleBarOnly;
  float ConfigMemoryCompactTimer;
  float MouseDoubleClickTime;
  float MouseDoubleClickMaxDist;
  float MouseDragThreshold;
  float KeyRepeatDelay;
  float KeyRepeatRate;
  bool ConfigDebugBeginReturnValueOnce;
  bool ConfigDebugBeginReturnValueLoop;
  bool ConfigDebugIgnoreFocusLoss;
  bool ConfigDebugIniSettings;
  const char* BackendPlatformName;
  const char* BackendRendererName;
  const void* BackendPlatformUserData;
  const void* BackendRendererUserData;
  const void* BackendLanguageUserData;
  const void* GetClipboardTextFn; // complex callback: const char *(*)(void *) -
  const void* SetClipboardTextFn; // complex callback: void (*)(void *, const char *) -
  const void* ClipboardUserData;
  const void* SetPlatformImeDataFn; // complex callback: void (*)(const ImGuiViewport &, ImGuiPlatformImeData *) -
  const void* ImeWindowHandle;
  bool WantCaptureMouse;
  bool WantCaptureKeyboard;
  bool WantTextInput;
  bool WantSetMousePos;
  bool WantSaveIniSettings;
  bool NavActive;
  bool NavVisible;
  float Framerate;
  int MetricsRenderVertices;
  int MetricsRenderIndices;
  int MetricsRenderWindows;
  int MetricsActiveWindows;
  int MetricsActiveAllocations;
  ImVec2 MouseDelta;
  int KeyMap[652];
  bool KeysDown[652];
  float NavInputs[16];
  const ImGuiContext& Ctx;
  ImVec2 MousePos;
  bool MouseDown[5];
  float MouseWheel;
  float MouseWheelH;
  ImGuiMouseSource MouseSource;
  ImGuiID MouseHoveredViewport;
  bool KeyCtrl;
  bool KeyShift;
  bool KeyAlt;
  bool KeySuper;
  ImGuiKeyChord KeyMods;
  ImGuiKeyData KeysData[652];
  bool WantCaptureMouseUnlessPopupClose;
  ImVec2 MousePosPrev;
  ImVec2 MouseClickedPos[5];
  double MouseClickedTime[5];
  bool MouseClicked[5];
  bool MouseDoubleClicked[5];
  ImU16 MouseClickedCount[5];
  ImU16 MouseClickedLastCount[5];
  bool MouseReleased[5];
  bool MouseDownOwned[5];
  bool MouseDownOwnedUnlessPopupClose[5];
  bool MouseWheelRequestAxisSwap;
  float MouseDownDuration[5];
  float MouseDownDurationPrev[5];
  ImVec2 MouseDragMaxDistanceAbs[5];
  float MouseDragMaxDistanceSqr[5];
  float PenPressure;
  bool AppFocusLost;
  bool AppAcceptingEvents;
  ImS8 BackendUsingLegacyKeyArrays;
  bool BackendUsingLegacyNavInputArray;
  ImWchar16 InputQueueSurrogate;
  ImVector InputQueueCharacters;
} ImGuiIO;
void imgui_ImGuiIO_AddKeyEvent(const ImGuiIO& ImGuiIO_ctx, ImGuiKey key, bool down);
void imgui_ImGuiIO_AddKeyAnalogEvent(const ImGuiIO& ImGuiIO_ctx, ImGuiKey key, bool down, float v);
void imgui_ImGuiIO_AddMousePosEvent(const ImGuiIO& ImGuiIO_ctx, float x, float y);
void imgui_ImGuiIO_AddMouseButtonEvent(const ImGuiIO& ImGuiIO_ctx, int button, bool down);
void imgui_ImGuiIO_AddMouseWheelEvent(const ImGuiIO& ImGuiIO_ctx, float wheel_x, float wheel_y);
void imgui_ImGuiIO_AddMouseSourceEvent(const ImGuiIO& ImGuiIO_ctx, ImGuiMouseSource source);
void imgui_ImGuiIO_AddMouseViewportEvent(const ImGuiIO& ImGuiIO_ctx, ImGuiID id);
void imgui_ImGuiIO_AddFocusEvent(const ImGuiIO& ImGuiIO_ctx, bool focused);
void imgui_ImGuiIO_AddInputCharacter(const ImGuiIO& ImGuiIO_ctx, unsigned int c);
void imgui_ImGuiIO_AddInputCharacterUTF16(const ImGuiIO& ImGuiIO_ctx, ImWchar16 c);
void imgui_ImGuiIO_AddInputCharactersUTF8(const ImGuiIO& ImGuiIO_ctx, const char* str);
void imgui_ImGuiIO_SetKeyEventNativeData(const ImGuiIO& ImGuiIO_ctx, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index);
void imgui_ImGuiIO_SetAppAcceptingEvents(const ImGuiIO& ImGuiIO_ctx, bool accepting_events);
void imgui_ImGuiIO_ClearEventsQueue(const ImGuiIO& ImGuiIO_ctx);
void imgui_ImGuiIO_ClearInputKeys(const ImGuiIO& ImGuiIO_ctx);
void imgui_ImGuiIO_ClearInputCharacters(const ImGuiIO& ImGuiIO_ctx);
void imgui_ImGuiIO_FontGlobalScale(const ImGuiIO& ImGuiIO_ctx, float val);

// void imgui_ImGuiIO();
typedef struct ImGuiInputTextCallbackData {
  const ImGuiContext& Ctx;
  ImGuiInputTextFlags EventFlag;
  ImGuiInputTextFlags Flags;
  const void* UserData;
  ImWchar EventChar;
  ImGuiKey EventKey;
  const char& Buf;
  int BufTextLen;
  int BufSize;
  bool BufDirty;
  int CursorPos;
  int SelectionStart;
  int SelectionEnd;
} ImGuiInputTextCallbackData;
// void imgui_ImGuiInputTextCallbackData();
void imgui_ImGuiInputTextCallbackData_DeleteChars(const ImGuiInputTextCallbackData& ImGuiInputTextCallbackData_ctx, int pos, int bytes_count);
void imgui_ImGuiInputTextCallbackData_InsertChars(const ImGuiInputTextCallbackData& ImGuiInputTextCallbackData_ctx, int pos, const char* text, const char* text_end);
void imgui_ImGuiInputTextCallbackData_SelectAll(const ImGuiInputTextCallbackData& ImGuiInputTextCallbackData_ctx);
void imgui_ImGuiInputTextCallbackData_ClearSelection(const ImGuiInputTextCallbackData& ImGuiInputTextCallbackData_ctx);
bool imgui_ImGuiInputTextCallbackData_HasSelection(const ImGuiInputTextCallbackData& ImGuiInputTextCallbackData_ctx);
typedef struct ImGuiSizeCallbackData {
  const void* UserData;
  ImVec2 Pos;
  ImVec2 CurrentSize;
  ImVec2 DesiredSize;
} ImGuiSizeCallbackData;
typedef struct ImGuiWindowClass {
  ImGuiID ClassId;
  ImGuiID ParentViewportId;
  ImGuiViewportFlags ViewportFlagsOverrideSet;
  ImGuiViewportFlags ViewportFlagsOverrideClear;
  ImGuiTabItemFlags TabItemFlagsOverrideSet;
  ImGuiDockNodeFlags DockNodeFlagsOverrideSet;
  bool DockingAlwaysTabBar;
  bool DockingAllowUnclassed;
} ImGuiWindowClass;
// void imgui_ImGuiWindowClass();
typedef struct ImGuiPayload {
  const void* Data;
  int DataSize;
  ImGuiID SourceId;
  ImGuiID SourceParentId;
  int DataFrameCount;
  char DataType[33];
  bool Preview;
  bool Delivery;
} ImGuiPayload;
// void imgui_ImGuiPayload();
void imgui_ImGuiPayload_Clear(const ImGuiPayload& ImGuiPayload_ctx);
bool imgui_ImGuiPayload_IsDataType(const ImGuiPayload& ImGuiPayload_ctx, const char* type);
bool imgui_ImGuiPayload_IsPreview(const ImGuiPayload& ImGuiPayload_ctx);
bool imgui_ImGuiPayload_IsDelivery(const ImGuiPayload& ImGuiPayload_ctx);
typedef struct ImGuiTableColumnSortSpecs {
  ImGuiID ColumnUserID;
  ImS16 ColumnIndex;
  ImS16 SortOrder;
  ImGuiSortDirection SortDirection;
} ImGuiTableColumnSortSpecs;
// void imgui_ImGuiTableColumnSortSpecs();
typedef struct ImGuiTableSortSpecs {
  const ImGuiTableColumnSortSpecs* Specs;
  int SpecsCount;
  bool SpecsDirty;
} ImGuiTableSortSpecs;
// void imgui_ImGuiTableSortSpecs();
typedef struct ImGuiTextFilter {

struct ImGuiTextRange {
    const char* b;
    const char* e;
  };
  char InputBuf[256];
  ImVector Filters;
  int CountGrep;
} ImGuiTextFilter;
// void imgui_ImGuiTextFilter(const char* default_filter);
bool imgui_ImGuiTextFilter_Draw(const ImGuiTextFilter& ImGuiTextFilter_ctx, const char* label, float width);
bool imgui_ImGuiTextFilter_PassFilter(const ImGuiTextFilter& ImGuiTextFilter_ctx, const char* text, const char* text_end);
void imgui_ImGuiTextFilter_Build(const ImGuiTextFilter& ImGuiTextFilter_ctx);
void imgui_ImGuiTextFilter_Clear(const ImGuiTextFilter& ImGuiTextFilter_ctx);
bool imgui_ImGuiTextFilter_IsActive(const ImGuiTextFilter& ImGuiTextFilter_ctx);
typedef struct ImGuiTextBuffer {
  ImVector Buf;
} ImGuiTextBuffer;
// void imgui_ImGuiTextBuffer();
const char * imgui_ImGuiTextBuffer_begin(const ImGuiTextBuffer& ImGuiTextBuffer_ctx);
const char * imgui_ImGuiTextBuffer_end(const ImGuiTextBuffer& ImGuiTextBuffer_ctx);
int imgui_ImGuiTextBuffer_size(const ImGuiTextBuffer& ImGuiTextBuffer_ctx);
bool imgui_ImGuiTextBuffer_empty(const ImGuiTextBuffer& ImGuiTextBuffer_ctx);
void imgui_ImGuiTextBuffer_clear(const ImGuiTextBuffer& ImGuiTextBuffer_ctx);
void imgui_ImGuiTextBuffer_reserve(const ImGuiTextBuffer& ImGuiTextBuffer_ctx, int capacity);
const char * imgui_ImGuiTextBuffer_c_str(const ImGuiTextBuffer& ImGuiTextBuffer_ctx);
void imgui_ImGuiTextBuffer_append(const ImGuiTextBuffer& ImGuiTextBuffer_ctx, const char* str, const char* str_end);
void imgui_ImGuiTextBuffer_appendfv(const ImGuiTextBuffer& ImGuiTextBuffer_ctx, const char* fmt, va_list args);
typedef struct ImGuiStorage {

struct ImGuiStoragePair {
    ImGuiID key;


  //union {
  //    int val_i;
  //    float val_f;
      const void* val_p;
  //  };
  };
  ImVector Data;
} ImGuiStorage;
void imgui_ImGuiStorage_Clear(const ImGuiStorage& ImGuiStorage_ctx);
int imgui_ImGuiStorage_GetInt(const ImGuiStorage& ImGuiStorage_ctx, ImGuiID key, int default_val);
void imgui_ImGuiStorage_SetInt(const ImGuiStorage& ImGuiStorage_ctx, ImGuiID key, int val);
bool imgui_ImGuiStorage_GetBool(const ImGuiStorage& ImGuiStorage_ctx, ImGuiID key, bool default_val);
void imgui_ImGuiStorage_SetBool(const ImGuiStorage& ImGuiStorage_ctx, ImGuiID key, bool val);
float imgui_ImGuiStorage_GetFloat(const ImGuiStorage& ImGuiStorage_ctx, ImGuiID key, float default_val);
void imgui_ImGuiStorage_SetFloat(const ImGuiStorage& ImGuiStorage_ctx, ImGuiID key, float val);
const void * imgui_ImGuiStorage_GetVoidPtr(const ImGuiStorage& ImGuiStorage_ctx, ImGuiID key);
void imgui_ImGuiStorage_SetVoidPtr(const ImGuiStorage& ImGuiStorage_ctx, ImGuiID key, const void* val);
const int & imgui_ImGuiStorage_GetIntRef(const ImGuiStorage& ImGuiStorage_ctx, ImGuiID key, int default_val);
const bool & imgui_ImGuiStorage_GetBoolRef(const ImGuiStorage& ImGuiStorage_ctx, ImGuiID key, bool default_val);
const float & imgui_ImGuiStorage_GetFloatRef(const ImGuiStorage& ImGuiStorage_ctx, ImGuiID key, float default_val);
//void ** imgui_ImGuiStorage_GetVoidPtrRef(ImGuiStorage& ImGuiStorage_ctx, ImGuiID key, const void* default_val);
void imgui_ImGuiStorage_SetAllInt(const ImGuiStorage& ImGuiStorage_ctx, int val);
void imgui_ImGuiStorage_BuildSortByKey(const ImGuiStorage& ImGuiStorage_ctx);
typedef struct ImGuiListClipper {
  const ImGuiContext& Ctx;
  int DisplayStart;
  int DisplayEnd;
  int ItemsCount;
  float ItemsHeight;
  float StartPosY;
  const void* TempData;
} ImGuiListClipper;
// void imgui_ImGuiListClipper();
void imgui_ImGuiListClipper_Begin(const ImGuiListClipper& ImGuiListClipper_ctx, int items_count, float items_height);
void imgui_ImGuiListClipper_End(const ImGuiListClipper& ImGuiListClipper_ctx);
bool imgui_ImGuiListClipper_Step(const ImGuiListClipper& ImGuiListClipper_ctx);
void imgui_ImGuiListClipper_IncludeRangeByIndices(const ImGuiListClipper& ImGuiListClipper_ctx, int item_begin, int item_end);
void imgui_ImGuiListClipper_ForceDisplayRangeByIndices(const ImGuiListClipper& ImGuiListClipper_ctx, int item_begin, int item_end);
typedef struct ImColor {
  ImVec4 Value;
} ImColor;
// void imgui_ImColor();
// void imgui_ImColor(float r, float g, float b, float a);
// void imgui_ImColor(const ImVec4* col);
// void imgui_ImColor(int r, int g, int b, int a);
// void imgui_ImColor(ImU32 rgba);
void imgui_ImColor_SetHSV(const ImColor& ImColor_ctx, float h, float s, float v, float a);
ImColor imgui_ImColor_HSV(const ImColor& ImColor_ctx, float h, float s, float v, float a);
//typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);
typedef struct ImDrawCmd {
  ImVec4 ClipRect;
  ImTextureID TextureId;
  unsigned int VtxOffset;
  unsigned int IdxOffset;
  unsigned int ElemCount;
  const void* UserCallback; //ImDrawCallback UserCallback;
  const void* UserCallbackData;
} ImDrawCmd;
// void imgui_ImDrawCmd();
ImTextureID imgui_ImDrawCmd_GetTexID(const ImDrawCmd& ImDrawCmd_ctx);
typedef struct ImDrawVert {
  ImVec2 pos;
  ImVec2 uv;
  ImU32 col;
} ImDrawVert;
typedef struct ImDrawCmdHeader {
  ImVec4 ClipRect;
  ImTextureID TextureId;
  unsigned int VtxOffset;
} ImDrawCmdHeader;
typedef struct ImDrawListSplitter {
  int _Current;
  int _Count;
  ImVector _Channels;
} ImDrawListSplitter;
// void imgui_ImDrawListSplitter();
void imgui_ImDrawListSplitter_Clear(const ImDrawListSplitter& ImDrawListSplitter_ctx);
void imgui_ImDrawListSplitter_ClearFreeMemory(const ImDrawListSplitter& ImDrawListSplitter_ctx);
void imgui_ImDrawListSplitter_Split(const ImDrawListSplitter& ImDrawListSplitter_ctx, const ImDrawList& draw_list, int count);
void imgui_ImDrawListSplitter_Merge(const ImDrawListSplitter& ImDrawListSplitter_ctx, const ImDrawList& draw_list);
void imgui_ImDrawListSplitter_SetCurrentChannel(const ImDrawListSplitter& ImDrawListSplitter_ctx, const ImDrawList& draw_list, int channel_idx);

typedef enum {
  ImDrawFlags_None = 0,
  ImDrawFlags_Closed = 1 << 0,
  ImDrawFlags_RoundCornersTopLeft = 1 << 4,
  ImDrawFlags_RoundCornersTopRight = 1 << 5,
  ImDrawFlags_RoundCornersBottomLeft = 1 << 6,
  ImDrawFlags_RoundCornersBottomRight = 1 << 7,
  ImDrawFlags_RoundCornersNone = 1 << 8,
  ImDrawFlags_RoundCornersTop = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight,
  ImDrawFlags_RoundCornersBottom = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight,
  ImDrawFlags_RoundCornersLeft = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersTopLeft,
  ImDrawFlags_RoundCornersRight = ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_RoundCornersTopRight,
  ImDrawFlags_RoundCornersAll = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight | ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight,
  ImDrawFlags_RoundCornersDefault_ = ImDrawFlags_RoundCornersAll,
  ImDrawFlags_RoundCornersMask_ = ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCornersNone
} ImDrawFlags_;

typedef enum {
  ImDrawListFlags_None = 0,
  ImDrawListFlags_AntiAliasedLines = 1 << 0,
  ImDrawListFlags_AntiAliasedLinesUseTex = 1 << 1,
  ImDrawListFlags_AntiAliasedFill = 1 << 2,
  ImDrawListFlags_AllowVtxOffset = 1 << 3
} ImDrawListFlags_;
typedef struct ImDrawList {
  ImVector CmdBuffer;
  ImVector IdxBuffer;
  ImVector VtxBuffer;
  ImDrawListFlags Flags;
  unsigned int _VtxCurrentIdx;
  const ImDrawListSharedData& _Data;
  const char* _OwnerName;
  const ImDrawVert& _VtxWritePtr;
  const unsigned int& _IdxWritePtr;
  ImVector _ClipRectStack;
  ImVector _TextureIdStack;
  ImVector _Path;
  ImDrawCmdHeader _CmdHeader;
  ImDrawListSplitter _Splitter;
  float _FringeScale;
} ImDrawList;
// void imgui_ImDrawList(ImDrawListSharedData* shared_data);
void imgui_ImDrawList_PushClipRect(const ImDrawList& ImDrawList_ctx, const ImVec2* clip_rect_min, const ImVec2* clip_rect_max, bool intersect_with_current_clip_rect);
void imgui_ImDrawList_PushClipRectFullScreen(const ImDrawList& ImDrawList_ctx);
void imgui_ImDrawList_PopClipRect(const ImDrawList& ImDrawList_ctx);
void imgui_ImDrawList_PushTextureID(const ImDrawList& ImDrawList_ctx, ImTextureID texture_id);
void imgui_ImDrawList_PopTextureID(const ImDrawList& ImDrawList_ctx);
ImVec2 imgui_ImDrawList_GetClipRectMin(const ImDrawList& ImDrawList_ctx);
ImVec2 imgui_ImDrawList_GetClipRectMax(const ImDrawList& ImDrawList_ctx);
void imgui_ImDrawList_AddLine(const ImDrawList& ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, ImU32 col, float thickness);
void imgui_ImDrawList_AddRect(const ImDrawList& ImDrawList_ctx, const ImVec2* p_min, const ImVec2* p_max, ImU32 col, float rounding, ImDrawFlags flags, float thickness);
void imgui_ImDrawList_AddRectFilled(const ImDrawList& ImDrawList_ctx, const ImVec2* p_min, const ImVec2* p_max, ImU32 col, float rounding, ImDrawFlags flags);
void imgui_ImDrawList_AddRectFilledMultiColor(const ImDrawList& ImDrawList_ctx, const ImVec2* p_min, const ImVec2* p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);
void imgui_ImDrawList_AddQuad(const ImDrawList& ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, const ImVec2* p4, ImU32 col, float thickness);
void imgui_ImDrawList_AddQuadFilled(const ImDrawList& ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, const ImVec2* p4, ImU32 col);
void imgui_ImDrawList_AddTriangle(const ImDrawList& ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, ImU32 col, float thickness);
void imgui_ImDrawList_AddTriangleFilled(const ImDrawList& ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, ImU32 col);
void imgui_ImDrawList_AddCircle(const ImDrawList& ImDrawList_ctx, const ImVec2* center, float radius, ImU32 col, int num_segments, float thickness);
void imgui_ImDrawList_AddCircleFilled(const ImDrawList& ImDrawList_ctx, const ImVec2* center, float radius, ImU32 col, int num_segments);
void imgui_ImDrawList_AddNgon(const ImDrawList& ImDrawList_ctx, const ImVec2* center, float radius, ImU32 col, int num_segments, float thickness);
void imgui_ImDrawList_AddNgonFilled(const ImDrawList& ImDrawList_ctx, const ImVec2* center, float radius, ImU32 col, int num_segments);
void imgui_ImDrawList_AddText1(const ImDrawList& ImDrawList_ctx, const ImVec2* pos, ImU32 col, const char* text_begin, const char* text_end);
void imgui_ImDrawList_AddText2(const ImDrawList& ImDrawList_ctx, const ImFont* font, float font_size, const ImVec2* pos, ImU32 col, const char* text_begin, const char* text_end, float wrap_width, const ImVec4* cpu_fine_clip_rect);
void imgui_ImDrawList_AddPolyline(const ImDrawList& ImDrawList_ctx, const ImVec2* points, int num_points, ImU32 col, ImDrawFlags flags, float thickness);
void imgui_ImDrawList_AddConvexPolyFilled(const ImDrawList& ImDrawList_ctx, const ImVec2* points, int num_points, ImU32 col);
void imgui_ImDrawList_AddBezierCubic(const ImDrawList& ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, const ImVec2* p4, ImU32 col, float thickness, int num_segments);
void imgui_ImDrawList_AddBezierQuadratic(const ImDrawList& ImDrawList_ctx, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, ImU32 col, float thickness, int num_segments);
void imgui_ImDrawList_AddImage(const ImDrawList& ImDrawList_ctx, ImTextureID user_texture_id, const ImVec2* p_min, const ImVec2* p_max, const ImVec2* uv_min, const ImVec2* uv_max, ImU32 col);
void imgui_ImDrawList_AddImageQuad(const ImDrawList& ImDrawList_ctx, ImTextureID user_texture_id, const ImVec2* p1, const ImVec2* p2, const ImVec2* p3, const ImVec2* p4, const ImVec2* uv1, const ImVec2* uv2, const ImVec2* uv3, const ImVec2* uv4, ImU32 col);
void imgui_ImDrawList_AddImageRounded(const ImDrawList& ImDrawList_ctx, ImTextureID user_texture_id, const ImVec2* p_min, const ImVec2* p_max, const ImVec2* uv_min, const ImVec2* uv_max, ImU32 col, float rounding, ImDrawFlags flags);
void imgui_ImDrawList_PathClear(const ImDrawList& ImDrawList_ctx);
void imgui_ImDrawList_PathLineTo(const ImDrawList& ImDrawList_ctx, const ImVec2* pos);
void imgui_ImDrawList_PathLineToMergeDuplicate(const ImDrawList& ImDrawList_ctx, const ImVec2* pos);
void imgui_ImDrawList_PathFillConvex(const ImDrawList& ImDrawList_ctx, ImU32 col);
void imgui_ImDrawList_PathStroke(const ImDrawList& ImDrawList_ctx, ImU32 col, ImDrawFlags flags, float thickness);
void imgui_ImDrawList_PathArcTo(const ImDrawList& ImDrawList_ctx, const ImVec2* center, float radius, float a_min, float a_max, int num_segments);
void imgui_ImDrawList_PathArcToFast(const ImDrawList& ImDrawList_ctx, const ImVec2* center, float radius, int a_min_of_12, int a_max_of_12);
void imgui_ImDrawList_PathBezierCubicCurveTo(const ImDrawList& ImDrawList_ctx, const ImVec2* p2, const ImVec2* p3, const ImVec2* p4, int num_segments);
void imgui_ImDrawList_PathBezierQuadraticCurveTo(const ImDrawList& ImDrawList_ctx, const ImVec2* p2, const ImVec2* p3, int num_segments);
void imgui_ImDrawList_PathRect(const ImDrawList& ImDrawList_ctx, const ImVec2* rect_min, const ImVec2* rect_max, float rounding, ImDrawFlags flags);
//void imgui_ImDrawList_AddCallback(const ImDrawList& ImDrawList_ctx, ImDrawCallback callback, const void* callback_data);
void imgui_ImDrawList_AddDrawCmd(const ImDrawList& ImDrawList_ctx);
const ImDrawList & imgui_ImDrawList_CloneOutput(const ImDrawList& ImDrawList_ctx);
void imgui_ImDrawList_ChannelsSplit(const ImDrawList& ImDrawList_ctx, int count);
void imgui_ImDrawList_ChannelsMerge(const ImDrawList& ImDrawList_ctx);
void imgui_ImDrawList_ChannelsSetCurrent(const ImDrawList& ImDrawList_ctx, int n);
void imgui_ImDrawList_PrimReserve(const ImDrawList& ImDrawList_ctx, int idx_count, int vtx_count);
void imgui_ImDrawList_PrimUnreserve(const ImDrawList& ImDrawList_ctx, int idx_count, int vtx_count);
void imgui_ImDrawList_PrimRect(const ImDrawList& ImDrawList_ctx, const ImVec2* a, const ImVec2* b, ImU32 col);
void imgui_ImDrawList_PrimRectUV(const ImDrawList& ImDrawList_ctx, const ImVec2* a, const ImVec2* b, const ImVec2* uv_a, const ImVec2* uv_b, ImU32 col);
void imgui_ImDrawList_PrimQuadUV(const ImDrawList& ImDrawList_ctx, const ImVec2* a, const ImVec2* b, const ImVec2* c, const ImVec2* d, const ImVec2* uv_a, const ImVec2* uv_b, const ImVec2* uv_c, const ImVec2* uv_d, ImU32 col);
void imgui_ImDrawList_PrimWriteVtx(const ImDrawList& ImDrawList_ctx, const ImVec2* pos, const ImVec2* uv, ImU32 col);
void imgui_ImDrawList_PrimWriteIdx(const ImDrawList& ImDrawList_ctx, unsigned int idx);
void imgui_ImDrawList_PrimVtx(const ImDrawList& ImDrawList_ctx, const ImVec2* pos, const ImVec2* uv, ImU32 col);
void imgui_ImDrawList__ResetForNewFrame(const ImDrawList& ImDrawList_ctx);
void imgui_ImDrawList__ClearFreeMemory(const ImDrawList& ImDrawList_ctx);
void imgui_ImDrawList__PopUnusedDrawCmd(const ImDrawList& ImDrawList_ctx);
void imgui_ImDrawList__TryMergeDrawCmds(const ImDrawList& ImDrawList_ctx);
void imgui_ImDrawList__OnChangedClipRect(const ImDrawList& ImDrawList_ctx);
void imgui_ImDrawList__OnChangedTextureID(const ImDrawList& ImDrawList_ctx);
void imgui_ImDrawList__OnChangedVtxOffset(const ImDrawList& ImDrawList_ctx);
int imgui_ImDrawList__CalcCircleAutoSegmentCount(const ImDrawList& ImDrawList_ctx, float radius);
void imgui_ImDrawList__PathArcToFastEx(const ImDrawList& ImDrawList_ctx, const ImVec2* center, float radius, int a_min_sample, int a_max_sample, int a_step);
void imgui_ImDrawList__PathArcToN(const ImDrawList& ImDrawList_ctx, const ImVec2* center, float radius, float a_min, float a_max, int num_segments);
typedef struct ImDrawData {
  bool Valid;
  int CmdListsCount;
  int TotalIdxCount;
  int TotalVtxCount;
  //const ImDrawList** CmdLists;
  ImVec2 DisplayPos;
  ImVec2 DisplaySize;
  ImVec2 FramebufferScale;
  const ImGuiViewport& OwnerViewport;
} ImDrawData;
// void imgui_ImDrawData();
void imgui_ImDrawData_Clear(const ImDrawData& ImDrawData_ctx);
void imgui_ImDrawData_DeIndexAllBuffers(const ImDrawData& ImDrawData_ctx);
void imgui_ImDrawData_ScaleClipRects(const ImDrawData& ImDrawData_ctx, const ImVec2* fb_scale);
typedef struct ImFontConfig {
  const void* FontData;
  int FontDataSize;
  bool FontDataOwnedByAtlas;
  int FontNo;
  float SizePixels;
  int OversampleH;
  int OversampleV;
  bool PixelSnapH;
  ImVec2 GlyphExtraSpacing;
  ImVec2 GlyphOffset;
  const ImWchar* GlyphRanges;
  float GlyphMinAdvanceX;
  float GlyphMaxAdvanceX;
  bool MergeMode;
  unsigned int FontBuilderFlags;
  float RasterizerMultiply;
  ImWchar EllipsisChar;
  char Name[40];
  const ImFont& DstFont;
} ImFontConfig;
// void imgui_ImFontConfig();
typedef struct ImFontGlyph {
  unsigned int Colored;
  unsigned int Visible;
  unsigned int Codepoint;
  float AdvanceX;
  float X0;
  float Y0;
  float X1;
  float Y1;
  float U0;
  float V0;
  float U1;
  float V1;
} ImFontGlyph;
typedef struct ImFontGlyphRangesBuilder {
  ImVector UsedChars;
} ImFontGlyphRangesBuilder;
// void imgui_ImFontGlyphRangesBuilder();
void imgui_ImFontGlyphRangesBuilder_Clear(const ImFontGlyphRangesBuilder& ImFontGlyphRangesBuilder_ctx);
bool imgui_ImFontGlyphRangesBuilder_GetBit(const ImFontGlyphRangesBuilder& ImFontGlyphRangesBuilder_ctx, size_t n);
void imgui_ImFontGlyphRangesBuilder_SetBit(const ImFontGlyphRangesBuilder& ImFontGlyphRangesBuilder_ctx, size_t n);
void imgui_ImFontGlyphRangesBuilder_AddChar(const ImFontGlyphRangesBuilder& ImFontGlyphRangesBuilder_ctx, ImWchar c);
void imgui_ImFontGlyphRangesBuilder_AddText(const ImFontGlyphRangesBuilder& ImFontGlyphRangesBuilder_ctx, const char* text, const char* text_end);
void imgui_ImFontGlyphRangesBuilder_AddRanges(const ImFontGlyphRangesBuilder& ImFontGlyphRangesBuilder_ctx, const ImWchar* ranges);
typedef struct ImFontAtlasCustomRect {
  unsigned short Width;
  unsigned short Height;
  unsigned short X;
  unsigned short Y;
  unsigned int GlyphID;
  float GlyphAdvanceX;
  ImVec2 GlyphOffset;
  const ImFont& Font;
} ImFontAtlasCustomRect;
// void imgui_ImFontAtlasCustomRect();
bool imgui_ImFontAtlasCustomRect_IsPacked(const ImFontAtlasCustomRect& ImFontAtlasCustomRect_ctx);

typedef enum {
  ImFontAtlasFlags_None = 0,
  ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,
  ImFontAtlasFlags_NoMouseCursors = 1 << 1,
  ImFontAtlasFlags_NoBakedLines = 1 << 2
} ImFontAtlasFlags_;
typedef struct ImFontAtlas {
  ImFontAtlasFlags Flags;
  ImTextureID TexID;
  int TexDesiredWidth;
  int TexGlyphPadding;
  bool Locked;
  const void* UserData;
  bool TexReady;
  bool TexPixelsUseColors;
  const unsigned char& TexPixelsAlpha8;
  const unsigned int& TexPixelsRGBA32;
  int TexWidth;
  int TexHeight;
  ImVec2 TexUvScale;
  ImVec2 TexUvWhitePixel;
  ImVector Fonts;
  ImVector CustomRects;
  ImVector ConfigData;
  ImVec4 TexUvLines[64];
  const ImFontBuilderIO* FontBuilderIO;
  unsigned int FontBuilderFlags;
  int PackIdMouseCursors;
  int PackIdLines;
} ImFontAtlas;
// void imgui_ImFontAtlas();
const ImFont & imgui_ImFontAtlas_AddFont(const ImFontAtlas& ImFontAtlas_ctx, const ImFontConfig* font_cfg);
const ImFont & imgui_ImFontAtlas_AddFontDefault(const ImFontAtlas& ImFontAtlas_ctx, const ImFontConfig* font_cfg);
const ImFont & imgui_ImFontAtlas_AddFontFromFileTTF(const ImFontAtlas& ImFontAtlas_ctx, const char* filename, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges);
const ImFont & imgui_ImFontAtlas_AddFontFromMemoryTTF(const ImFontAtlas& ImFontAtlas_ctx, const void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges);
const ImFont & imgui_ImFontAtlas_AddFontFromMemoryCompressedTTF(const ImFontAtlas& ImFontAtlas_ctx, const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges);
const ImFont & imgui_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(const ImFontAtlas& ImFontAtlas_ctx, const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges);
void imgui_ImFontAtlas_ClearInputData(const ImFontAtlas& ImFontAtlas_ctx);
void imgui_ImFontAtlas_ClearTexData(const ImFontAtlas& ImFontAtlas_ctx);
void imgui_ImFontAtlas_ClearFonts(const ImFontAtlas& ImFontAtlas_ctx);
void imgui_ImFontAtlas_Clear(const ImFontAtlas& ImFontAtlas_ctx);
bool imgui_ImFontAtlas_Build(const ImFontAtlas& ImFontAtlas_ctx);
//void imgui_ImFontAtlas_GetTexDataAsAlpha8(const ImFontAtlas& ImFontAtlas_ctx, unsigned char** out_pixels, int& out_width, int& out_height, int& out_bytes_per_pixel);
//void imgui_ImFontAtlas_GetTexDataAsRGBA32(const ImFontAtlas& ImFontAtlas_ctx, unsigned char** out_pixels, int& out_width, int& out_height, int& out_bytes_per_pixel);
bool imgui_ImFontAtlas_IsBuilt(const ImFontAtlas& ImFontAtlas_ctx);
void imgui_ImFontAtlas_SetTexID(const ImFontAtlas& ImFontAtlas_ctx, ImTextureID id);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesDefault(const ImFontAtlas& ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesGreek(const ImFontAtlas& ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesKorean(const ImFontAtlas& ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesJapanese(const ImFontAtlas& ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesChineseFull(const ImFontAtlas& ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(const ImFontAtlas& ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesCyrillic(const ImFontAtlas& ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesThai(const ImFontAtlas& ImFontAtlas_ctx);
const ImWchar * imgui_ImFontAtlas_GetGlyphRangesVietnamese(const ImFontAtlas& ImFontAtlas_ctx);
int imgui_ImFontAtlas_AddCustomRectRegular(const ImFontAtlas& ImFontAtlas_ctx, int width, int height);
int imgui_ImFontAtlas_AddCustomRectFontGlyph(const ImFontAtlas& ImFontAtlas_ctx, const ImFont& font, ImWchar id, int width, int height, float advance_x, const ImVec2* offset);
const ImFontAtlasCustomRect & imgui_ImFontAtlas_GetCustomRectByIndex(const ImFontAtlas& ImFontAtlas_ctx, int index);
void imgui_ImFontAtlas_CalcCustomRectUV(const ImFontAtlas& ImFontAtlas_ctx, const ImFontAtlasCustomRect* rect, const ImVec2& out_uv_min, const ImVec2& out_uv_max);
bool imgui_ImFontAtlas_GetMouseCursorTexData(const ImFontAtlas& ImFontAtlas_ctx, ImGuiMouseCursor cursor, const ImVec2& out_offset, const ImVec2& out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2]);
typedef struct ImFont {
  ImVector IndexAdvanceX;
  float FallbackAdvanceX;
  float FontSize;
  ImVector IndexLookup;
  ImVector Glyphs;
  const ImFontGlyph* FallbackGlyph;
  const ImFontAtlas& ContainerAtlas;
  const ImFontConfig* ConfigData;
  short ConfigDataCount;
  ImWchar FallbackChar;
  ImWchar EllipsisChar;
  short EllipsisCharCount;
  float EllipsisWidth;
  float EllipsisCharStep;
  bool DirtyLookupTables;
  float Scale;
  float Ascent;
  float Descent;
  int MetricsTotalSurface;
  ImU8 Used4kPagesMap[2];
} ImFont;
// void imgui_ImFont();
const ImFontGlyph * imgui_ImFont_FindGlyph(const ImFont& ImFont_ctx, ImWchar c);
const ImFontGlyph * imgui_ImFont_FindGlyphNoFallback(const ImFont& ImFont_ctx, ImWchar c);
float imgui_ImFont_GetCharAdvance(const ImFont& ImFont_ctx, ImWchar c);
bool imgui_ImFont_IsLoaded(const ImFont& ImFont_ctx);
const char * imgui_ImFont_GetDebugName(const ImFont& ImFont_ctx);
//ImVec2 imgui_ImFont_CalcTextSizeA(const ImFont& ImFont_ctx, float size, float max_width, float wrap_width, const char* text_begin, const char* text_end, const char** remaining);
const char * imgui_ImFont_CalcWordWrapPositionA(const ImFont& ImFont_ctx, float scale, const char* text, const char* text_end, float wrap_width);
void imgui_ImFont_RenderChar(const ImFont& ImFont_ctx, const ImDrawList& draw_list, float size, const ImVec2* pos, ImU32 col, ImWchar c);
void imgui_ImFont_RenderText(const ImFont& ImFont_ctx, const ImDrawList& draw_list, float size, const ImVec2* pos, ImU32 col, const ImVec4* clip_rect, const char* text_begin, const char* text_end, float wrap_width, bool cpu_fine_clip);
void imgui_ImFont_BuildLookupTable(const ImFont& ImFont_ctx);
void imgui_ImFont_ClearOutputData(const ImFont& ImFont_ctx);
void imgui_ImFont_GrowIndex(const ImFont& ImFont_ctx, int new_size);
void imgui_ImFont_AddGlyph(const ImFont& ImFont_ctx, const ImFontConfig* src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);
void imgui_ImFont_AddRemapChar(const ImFont& ImFont_ctx, ImWchar dst, ImWchar src, bool overwrite_dst);
void imgui_ImFont_SetGlyphVisible(const ImFont& ImFont_ctx, ImWchar c, bool visible);
bool imgui_ImFont_IsGlyphRangeUnused(const ImFont& ImFont_ctx, unsigned int c_begin, unsigned int c_last);

typedef enum {
  ImGuiViewportFlags_None = 0,
  ImGuiViewportFlags_IsPlatformWindow = 1 << 0,
  ImGuiViewportFlags_IsPlatformMonitor = 1 << 1,
  ImGuiViewportFlags_OwnedByApp = 1 << 2,
  ImGuiViewportFlags_NoDecoration = 1 << 3,
  ImGuiViewportFlags_NoTaskBarIcon = 1 << 4,
  ImGuiViewportFlags_NoFocusOnAppearing = 1 << 5,
  ImGuiViewportFlags_NoFocusOnClick = 1 << 6,
  ImGuiViewportFlags_NoInputs = 1 << 7,
  ImGuiViewportFlags_NoRendererClear = 1 << 8,
  ImGuiViewportFlags_NoAutoMerge = 1 << 9,
  ImGuiViewportFlags_TopMost = 1 << 10,
  ImGuiViewportFlags_CanHostOtherWindows = 1 << 11,
  ImGuiViewportFlags_IsMinimized = 1 << 12,
  ImGuiViewportFlags_IsFocused = 1 << 13
} ImGuiViewportFlags_;
typedef struct ImGuiViewport {
  ImGuiID ID;
  ImGuiViewportFlags Flags;
  ImVec2 Pos;
  ImVec2 Size;
  ImVec2 WorkPos;
  ImVec2 WorkSize;
  float DpiScale;
  ImGuiID ParentViewportId;
  const ImDrawData& DrawData;
  const void* RendererUserData;
  const void* PlatformUserData;
  const void* PlatformHandle;
  const void* PlatformHandleRaw;
  bool PlatformWindowCreated;
  bool PlatformRequestMove;
  bool PlatformRequestResize;
  bool PlatformRequestClose;
} ImGuiViewport;
// void imgui_ImGuiViewport();
ImVec2 imgui_ImGuiViewport_GetCenter(const ImGuiViewport& ImGuiViewport_ctx);
ImVec2 imgui_ImGuiViewport_GetWorkCenter(const ImGuiViewport& ImGuiViewport_ctx);
typedef struct ImGuiPlatformIO {
  const void* Platform_CreateWindow; // complex callback: void (*)(const ImGuiViewport &) -
  const void* Platform_DestroyWindow; // complex callback: void (*)(const ImGuiViewport &) -
  const void* Platform_ShowWindow; // complex callback: void (*)(const ImGuiViewport &) -
  const void* Platform_SetWindowPos; // complex callback: void (*)(const ImGuiViewport &, ImVec2) -
  const void* Platform_GetWindowPos; // complex callback: ImVec2 (*)(const ImGuiViewport &) -
  const void* Platform_SetWindowSize; // complex callback: void (*)(const ImGuiViewport &, ImVec2) -
  const void* Platform_GetWindowSize; // complex callback: ImVec2 (*)(const ImGuiViewport &) -
  const void* Platform_SetWindowFocus; // complex callback: void (*)(const ImGuiViewport &) -
  const void* Platform_GetWindowFocus; // complex callback: bool (*)(const ImGuiViewport &) -
  const void* Platform_GetWindowMinimized; // complex callback: bool (*)(const ImGuiViewport &) -
  const void* Platform_SetWindowTitle; // complex callback: void (*)(const ImGuiViewport &, const char *) -
  const void* Platform_SetWindowAlpha; // complex callback: void (*)(const ImGuiViewport &, float) -
  const void* Platform_UpdateWindow; // complex callback: void (*)(const ImGuiViewport &) -
  const void* Platform_RenderWindow; // complex callback: void (*)(const ImGuiViewport &, void *) -
  const void* Platform_SwapBuffers; // complex callback: void (*)(const ImGuiViewport &, void *) -
  const void* Platform_GetWindowDpiScale; // complex callback: float (*)(const ImGuiViewport &) -
  const void* Platform_OnChangedViewport; // complex callback: void (*)(const ImGuiViewport &) -
  const void* Platform_CreateVkSurface; // complex callback: int (*)(const ImGuiViewport &, ImU64, const void *, ImU64 *) -
  const void* Renderer_CreateWindow; // complex callback: void (*)(const ImGuiViewport &) -
  const void* Renderer_DestroyWindow; // complex callback: void (*)(const ImGuiViewport &) -
  const void* Renderer_SetWindowSize; // complex callback: void (*)(const ImGuiViewport &, ImVec2) -
  const void* Renderer_RenderWindow; // complex callback: void (*)(const ImGuiViewport &, void *) -
  const void* Renderer_SwapBuffers; // complex callback: void (*)(const ImGuiViewport &, void *) -
  ImVector Monitors;
  ImVector Viewports;
} ImGuiPlatformIO;
// void imgui_ImGuiPlatformIO();
typedef struct ImGuiPlatformMonitor {
  ImVec2 MainPos;
  ImVec2 MainSize;
  ImVec2 WorkPos;
  ImVec2 WorkSize;
  float DpiScale;
  const void* PlatformHandle;
} ImGuiPlatformMonitor;
// void imgui_ImGuiPlatformMonitor();
typedef struct ImGuiPlatformImeData {
  bool WantVisible;
  ImVec2 InputPos;
  float InputLineHeight;
} ImGuiPlatformImeData;
// void imgui_ImGuiPlatformImeData();
ImGuiKey imgui_GetKeyIndex(ImGuiKey key);
void imgui_SetItemAllowOverlap();
void imgui_PushAllowKeyboardFocus(bool tab_stop);
void imgui_PopAllowKeyboardFocus();
bool imgui_ImageButton2(ImTextureID user_texture_id, const ImVec2* size, const ImVec2* uv0, const ImVec2* uv1, int frame_padding, const ImVec4* bg_col, const ImVec4* tint_col);
void imgui_CaptureKeyboardFromApp(bool want_capture_keyboard);
void imgui_CaptureMouseFromApp(bool want_capture_mouse);
void imgui_CalcListClipping(int items_count, float items_height, const int& out_items_display_start, const int& out_items_display_end);
float imgui_GetWindowContentRegionWidth();
typedef ImDrawFlags ImDrawCornerFlags;

typedef enum {
  ImDrawCornerFlags_None,
  ImDrawCornerFlags_TopLeft,
  ImDrawCornerFlags_TopRight,
  ImDrawCornerFlags_BotLeft,
  ImDrawCornerFlags_BotRight,
  ImDrawCornerFlags_All,
  ImDrawCornerFlags_Top = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,
  ImDrawCornerFlags_Bot = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,
  ImDrawCornerFlags_Left = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,
  ImDrawCornerFlags_Right = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight
} ImDrawCornerFlags_;
typedef ImGuiKeyChord ImGuiModFlags;

typedef enum {
  ImGuiModFlags_None = 0,
  ImGuiModFlags_Ctrl,
  ImGuiModFlags_Shift,
  ImGuiModFlags_Alt,
  ImGuiModFlags_Super
} ImGuiModFlags_;
